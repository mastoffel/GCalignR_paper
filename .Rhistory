<<<<<<< HEAD
install_packages("mastoffel/GCalignR")
library(devtools)
install_packages("mastoffel/GCalignR")
install_github("mastoffel/GCalignR")
install.packages("devtools") devtools::install_github("mastoffel/GCalignR",
build_vignettes = TRUE)
install.packages("devtools") devtools::install_github("mastoffel/GCalignR",
build_vignettes = TRUE)
install.packages("devtools")
devtools::install_github("mastoffel/GCalignR",build_vignettes = TRUE)
=======
ggplot2::theme(axis.ticks = element_blank(), axis.text = element_blank()) +
scale_colour_manual(values = RColorBrewer::brewer.pal(3,"Dark2")[c(1,2)],
name = "",
breaks = c("FWB", "SSB"),
labels = c("Freshwater beach","Special study beach"),
guide = guide_legend(label.theme = element_text(
face = "italic", angle = 0, size = 11)))
>>>>>>> e3954c1e4fc9c87d45e6bbb45bd9f29ce31a310c
library(GCalignR)
?GCalignR
library(GCalignR)
?GCalignR
# Chunk 1
# devtools::install_github("cboettig/knitcitations@v1")
library(knitcitations)
cleanbib()
cite_options(citation_format = "pandoc", check.entries=FALSE)
library(bibtex)
# Chunk 2
knitr::opts_chunk$set(collapse = TRUE, comment = "#>", cache = TRUE) # warning = FALSE
# Chunk 3
data("peak_data")
# Chunk 4
check_input(data = peak_data,show_peaks = F) # If show_peaks = T, a histogram of peaks is plotted
# Chunk 6
data("aligned_peak_data")
# Chunk 7
library(ggplot2)
library(gridExtra)
grid.arrange(p1, p2, p3, widths=c(0.33, 0.33, 0.33))
library(GCalignR)
# Chunk 1
# devtools::install_github("cboettig/knitcitations@v1")
library(knitcitations)
cleanbib()
cite_options(citation_format = "pandoc", check.entries=FALSE)
library(bibtex)
# Chunk 2
knitr::opts_chunk$set(collapse = TRUE, comment = "#>", cache = TRUE) # warning = FALSE
# Chunk 3
library(GCalignR)
data("peak_data")
# Chunk 4
check_input(data = peak_data,show_peaks = F) # If show_peaks = T, a histogram of peaks is plotted
# Chunk 6
data("aligned_peak_data")
# Chunk 7
library(ggplot2)
library(gridExtra)
<<<<<<< HEAD
p1 <- gc_heatmap(aligned_peak_data,threshold = 0.01) # By default a threshold of 0.05 is used to mark deviations
p2 <- gc_heatmap(aligned_peak_data,threshold = 0.02)
p3 <- gc_heatmap(aligned_peak_data,threshold = 0.04)
grid.arrange(p1, p2, p3, widths=c(0.33, 0.33, 0.33))
?gc_heatmap
gc_heatmap(aligned_peak_data,threshold = 0.01, type = "continuous")
p1 <- gc_heatmap(aligned_peak_data,threshold = 0.01, type = "continous") # By default a threshold of 0.05 is used to mark deviations
p1
p1 <- gc_heatmap(aligned_peak_data,threshold = 0.01, substance_subset = 1:10) # By default a threshold of 0.05 is used to mark deviations
p1
gc_heatmap(aligned_peak_data,threshold = 0.01, substance_subset = 1:10, samples_subset = 1:10)
p1 <- gc_heatmap(aligned_peak_data,threshold = 0.01, substance_subset = 1:10, samples_subset = 1:10, label_size = 10) # By default a threshold of 0.05 is used to mark deviations
p2 <- gc_heatmap(aligned_peak_data,threshold = 0.02)
p1
p1 <- gc_heatmap(aligned_peak_data,threshold = 0.01, samples_subset = 1:10, label_size = 10) # By default a threshold of 0.05 is used to mark deviations
p1
gc_heatmap(aligned_peak_data,threshold = 0.01, label_size = 10)
p1 <- gc_heatmap(aligned_peak_data,threshold = 0.02, label_size = 10) # By default a threshold of 0.05 is used to mark deviations
p1
p1 <- gc_heatmap(aligned_peak_data,threshold = 0.02, samples_subset = 1:20, substance_subset = 1:20, label_size = 10) # By default a threshold of 0.05 is used to mark deviations
p1
p1 <- gc_heatmap(aligned_peak_data,threshold = 0.01, samples_subset = 1:20, substance_subset = 1:20, label_size = 10) # By default a threshold of 0.05 is used to mark deviations
p1
p1 <- gc_heatmap(aligned_peak_data,threshold = 0.01, samples_subset = 1:20, substance_subset = 30:50, label_size = 10) # By default a threshold of 0.05 is used to mark deviations
p1
gc_heatmap(aligned_peak_data,threshold = 0.01, samples_subset = 1:20, substance_subset = 20:50, label_size = 10) # By default a threshold of 0.05 is used to mark deviations
gc_heatmap(aligned_peak_data,threshold = 0.01, samples_subset = 1:20, substance_subset = 1:50, label_size = 10) # By default a threshold of 0.05 is used to mark deviations
p2 <- gc_heatmap(aligned_peak_data,threshold = 0.03, samples_subset = 1:20, substance_subset = 1:50, label_size = 10)
p2
grid.arrange(p1, p2, widths=c(0.5, 0.5))
gc_heatmap(aligned_peak_data,threshold = 0.01, samples_subset = 1:20, substance_subset = 1:50, label_size = 10)
gc_heatmap(aligned_peak_data,threshold = 0.03, samples_subset = 1:20, substance_subset = 1:50, label_size = 10)
grid.arrange(p1, p2, widths=c(0.5, 0.5))
p1 <- gc_heatmap(aligned_peak_data,threshold = 0.01, samples_subset = 1:20, substance_subset = 1:50, label_size = 10) # By default a threshold of 0.05 is used to mark deviations
p2 <- gc_heatmap(aligned_peak_data,threshold = 0.03, samples_subset = 1:20, substance_subset = 1:50, label_size = 10)
grid.arrange(p1, p2, widths=c(0.5, 0.5))
?check_input
check_input(data = peak_data,show_peaks = T) # If show_peaks = T, a histogram of peaks is plotted
check_input(data = peak_data,show_peaks = T, color = "red") # If show_peaks = T, a histogram of peaks is plotted
check_input(data = peak_data,show_peaks = T, color = "red") # If show_peaks = T, a histogram of peaks is plotted
warnings()
check_input(data = peak_data,show_peaks = T, colour = "red") # If show_peaks = T, a histogram of peaks is plotted
check_input(data = peak_data,show_peaks = T, col= "red") # If show_peaks = T, a histogram of peaks is plotted
test <- check_input(data = peak_data,show_peaks = T, col= "red") # If show_peaks = T, a histogram of peaks is plotted
test
?gc_heatmap
gc_heatmap(aligned_peak_data,threshold = 0.01, samples_subset = 1:20, substance_subset = 1:30, label_size = 10) # By default a threshold of 0.05 is used to mark deviations
gc_heatmap(aligned_peak_data,threshold = 0.01, samples_subset = 1:20, substance_subset = 1:30, label_size = 10, type = "continous") # By default a threshold of 0.05 is used to mark deviations
```
?`GCalignR-package`
install.packages("pander")
=======
library(grid)
check_input(data = "data/d1/Table_S1_raw.txt")
# chemical data
data("peak_data")
# corresponding factors
data("peak_factors")
pander::pandoc.table(head(peak_factors), caption = "Factors for Seal data")
bumble_bee_aligned <- align_chromatograms(data = "data/bumblee_bee_input.txt",
conc_col_name = "Area",
max_diff_peak2mean = 0.02,
min_diff_peak2peak = 0.05,
max_linear_shift = 0.05,
rt_col_name = "RT",
delete_single_peak = T)
# The alignment was performed in 3:30 minutes.
load(file = "data/bumble_bee_aligned.RData")
# The computation took 24:59 Minutes
load(file = "data/d1/seal_aligned.RData")
plot.bee1 <- gc_heatmap(bumble_bee_aligned, threshold = 0.07, main_title = paste("Bumblee bee data"),
label = F)
plot.seal1 <- gc_heatmap(seal_aligned, threshold = 0.07, main_title = "Fur seal data",
label = F, show_legend = F)
heatmaps <- gridExtra::grid.arrange(plot.bee1,plot.seal1)
grid::grid.newpage()
grid::grid.draw(heatmaps)
plot(seal_aligned)
# normalise abundancies within samples
bumble_bee_scent <- GCalignR::norm_peaks(bumble_bee_aligned,conc_col_name = "Area",rt_col_name = "RT",out = "data.frame")
# Log + 1 Transformation
bumble_bee_scent <- log(bumble_bee_scent + 1)
bumble_bee_scent <- bumble_bee_scent[match(row.names(bee_factors),row.names(bumble_bee_scent)),]
## Load factors
bee_factors <- read.csv("data/d1/Table_S1_factors.csv",sep = ";")
row.names(bee_factors) <- bee_factors[["ID"]]
# In total 55 samples are available
pander::pandoc.table(bee_factors[c(1:2,25:26,45:46),], caption = "Factors for Bumble bee data")
# normalise abundancies within samples
bumble_bee_scent <- GCalignR::norm_peaks(bumble_bee_aligned,conc_col_name = "Area",rt_col_name = "RT",out = "data.frame")
# Log + 1 Transformation
bumble_bee_scent <- log(bumble_bee_scent + 1)
bumble_bee_scent <- bumble_bee_scent[match(row.names(bee_factors),row.names(bumble_bee_scent)),]
# NMDS using bray-curtis in vegan
bumble_bee_scent_nmds <- vegan::metaMDS(comm = bumble_bee_scent,trymax = 9999)
# Get the coordinates
bumble_bee_scent_nmds <- as.data.frame(bumble_bee_scent_nmds$points)
bumble_bee_scent_nmds <- cbind(bumble_bee_scent_nmds,Species = bee_factors[["Species"]])
ggplot2::ggplot(data = bumble_bee_scent_nmds,ggplot2::aes(MDS1,MDS2,color = Species)) +
ggplot2::geom_point(size = 3) +
ggplot2::stat_ellipse(size = 2) +
ggplot2::labs(title = "", x = "MDS1", y = "MDS2") +
ggplot2::theme_bw(base_size = 14) +
ggplot2::theme(axis.ticks = element_blank(), axis.text = element_blank()) +
scale_colour_manual(values = RColorBrewer::brewer.pal(3,"Dark2"),
name = "",
breaks = c("bimaculatus", "ephippiatus", "flavifrons"),
labels = c("Bombus bimaculatus","B. ephippiatus","B. flavifrons"),
guide = guide_legend(label.theme = element_text(
face = "italic", angle = 0, size = 11)))
vegan::adonis(bumble_bee_scent ~ bee_factors$Species,permutations = 999)
# normalise abundancies within samples
seal_scent <- GCalignR::norm_peaks(seal_aligned,conc_col_name = "area",rt_col_name = "time",out = "data.frame")
# Log + 1 Transformation
seal_scent <- log(seal_scent + 1)
seal_scent <- seal_scent[match(row.names(peak_factors),row.names(seal_scent)),]
# NMDS using bray-curtis in vegan
seal_scent_nmds <- vegan::metaMDS(comm = seal_scent,trymax = 9999)
# Get the coordinates
seal_scent_nmds <- as.data.frame(seal_scent_nmds$points)
seal_scent_nmds <- cbind(seal_scent_nmds,colony = peak_factors[["colony"]])
ggplot2::ggplot(data = seal_scent_nmds,ggplot2::aes(MDS1,MDS2,color = colony)) +
ggplot2::geom_point(size = 3) +
ggplot2::stat_ellipse(size = 2) +
ggplot2::labs(title = "", x = "MDS1", y = "MDS2") +
ggplot2::theme_bw(base_size = 14) +
ggplot2::theme(axis.ticks = element_blank(), axis.text = element_blank()) +
scale_colour_manual(values = RColorBrewer::brewer.pal(3,"Dark2")[c(1,2)],
name = "",
breaks = c("FWB", "SSB"),
labels = c("Freshwater beach","Special study beach"),
guide = guide_legend(label.theme = element_text(
face = "italic", angle = 0, size = 11)))
library(GCalignR)
gc_heatmap(aligned_peak_data)
gc_heatmap(aligned_peak_data, legend_type = "gradient")
gc_heatmap(aligned_peak_data, legend_type = "colourbar")
gc_heatmap(aligned_peak_data, legend_type = "colourbar", threshold = 0.02)
gc_heatmap(aligned_peak_data, legend_type = "legend", threshold = 0.02)
installed.packages(rticles)
installed.packages("rticles")
install.packages("rticles")
install.packages("rticles")
seal_aligned
rm(list = ls())
library(GCalignR)
