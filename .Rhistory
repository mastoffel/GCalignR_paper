<<<<<<< HEAD
=======
install_packages("mastoffel/GCalignR")
library(devtools)
install_packages("mastoffel/GCalignR")
install_github("mastoffel/GCalignR")
install.packages("devtools") devtools::install_github("mastoffel/GCalignR",
build_vignettes = TRUE)
install.packages("devtools") devtools::install_github("mastoffel/GCalignR",
build_vignettes = TRUE)
install.packages("devtools")
devtools::install_github("mastoffel/GCalignR",build_vignettes = TRUE)
library(GCalignR)
?GCalignR
library(GCalignR)
?GCalignR
# Chunk 1
# devtools::install_github("cboettig/knitcitations@v1")
library(knitcitations)
cleanbib()
cite_options(citation_format = "pandoc", check.entries=FALSE)
library(bibtex)
# Chunk 2
knitr::opts_chunk$set(collapse = TRUE, comment = "#>", cache = TRUE) # warning = FALSE
# Chunk 3
data("peak_data")
# Chunk 4
check_input(data = peak_data,show_peaks = F) # If show_peaks = T, a histogram of peaks is plotted
# Chunk 6
data("aligned_peak_data")
# Chunk 7
library(ggplot2)
library(gridExtra)
grid.arrange(p1, p2, p3, widths=c(0.33, 0.33, 0.33))
library(GCalignR)
# Chunk 1
# devtools::install_github("cboettig/knitcitations@v1")
library(knitcitations)
>>>>>>> e72bbce8dbd6048473595cf22307b505dc8ee746
cleanbib()
cite_options(citation_format = "pandoc", check.entries=FALSE)
library(bibtex)
# Chunk 2
knitr::opts_chunk$set(collapse = TRUE, comment = "#>", cache = TRUE) # warning = FALSE
# Chunk 3
library(GCalignR)
data("peak_data")
# Chunk 4
check_input(data = peak_data,show_peaks = F) # If show_peaks = T, a histogram of peaks is plotted
# Chunk 6
data("aligned_peak_data")
# Chunk 7
library(ggplot2)
library(gridExtra)
p1 <- gc_heatmap(aligned_peak_data,threshold = 0.01) # By default a threshold of 0.05 is used to mark deviations
p2 <- gc_heatmap(aligned_peak_data,threshold = 0.02)
p3 <- gc_heatmap(aligned_peak_data,threshold = 0.04)
grid.arrange(p1, p2, p3, widths=c(0.33, 0.33, 0.33))
?gc_heatmap
gc_heatmap(aligned_peak_data,threshold = 0.01, type = "continuous")
p1 <- gc_heatmap(aligned_peak_data,threshold = 0.01, type = "continous") # By default a threshold of 0.05 is used to mark deviations
p1
p1 <- gc_heatmap(aligned_peak_data,threshold = 0.01, substance_subset = 1:10) # By default a threshold of 0.05 is used to mark deviations
p1
gc_heatmap(aligned_peak_data,threshold = 0.01, substance_subset = 1:10, samples_subset = 1:10)
p1 <- gc_heatmap(aligned_peak_data,threshold = 0.01, substance_subset = 1:10, samples_subset = 1:10, label_size = 10) # By default a threshold of 0.05 is used to mark deviations
p2 <- gc_heatmap(aligned_peak_data,threshold = 0.02)
p1
p1 <- gc_heatmap(aligned_peak_data,threshold = 0.01, samples_subset = 1:10, label_size = 10) # By default a threshold of 0.05 is used to mark deviations
p1
gc_heatmap(aligned_peak_data,threshold = 0.01, label_size = 10)
p1 <- gc_heatmap(aligned_peak_data,threshold = 0.02, label_size = 10) # By default a threshold of 0.05 is used to mark deviations
p1
p1 <- gc_heatmap(aligned_peak_data,threshold = 0.02, samples_subset = 1:20, substance_subset = 1:20, label_size = 10) # By default a threshold of 0.05 is used to mark deviations
p1
p1 <- gc_heatmap(aligned_peak_data,threshold = 0.01, samples_subset = 1:20, substance_subset = 1:20, label_size = 10) # By default a threshold of 0.05 is used to mark deviations
p1
p1 <- gc_heatmap(aligned_peak_data,threshold = 0.01, samples_subset = 1:20, substance_subset = 30:50, label_size = 10) # By default a threshold of 0.05 is used to mark deviations
p1
gc_heatmap(aligned_peak_data,threshold = 0.01, samples_subset = 1:20, substance_subset = 20:50, label_size = 10) # By default a threshold of 0.05 is used to mark deviations
gc_heatmap(aligned_peak_data,threshold = 0.01, samples_subset = 1:20, substance_subset = 1:50, label_size = 10) # By default a threshold of 0.05 is used to mark deviations
p2 <- gc_heatmap(aligned_peak_data,threshold = 0.03, samples_subset = 1:20, substance_subset = 1:50, label_size = 10)
p2
grid.arrange(p1, p2, widths=c(0.5, 0.5))
gc_heatmap(aligned_peak_data,threshold = 0.01, samples_subset = 1:20, substance_subset = 1:50, label_size = 10)
gc_heatmap(aligned_peak_data,threshold = 0.03, samples_subset = 1:20, substance_subset = 1:50, label_size = 10)
grid.arrange(p1, p2, widths=c(0.5, 0.5))
p1 <- gc_heatmap(aligned_peak_data,threshold = 0.01, samples_subset = 1:20, substance_subset = 1:50, label_size = 10) # By default a threshold of 0.05 is used to mark deviations
p2 <- gc_heatmap(aligned_peak_data,threshold = 0.03, samples_subset = 1:20, substance_subset = 1:50, label_size = 10)
grid.arrange(p1, p2, widths=c(0.5, 0.5))
?check_input
check_input(data = peak_data,show_peaks = T) # If show_peaks = T, a histogram of peaks is plotted
check_input(data = peak_data,show_peaks = T, color = "red") # If show_peaks = T, a histogram of peaks is plotted
check_input(data = peak_data,show_peaks = T, color = "red") # If show_peaks = T, a histogram of peaks is plotted
warnings()
check_input(data = peak_data,show_peaks = T, colour = "red") # If show_peaks = T, a histogram of peaks is plotted
check_input(data = peak_data,show_peaks = T, col= "red") # If show_peaks = T, a histogram of peaks is plotted
test <- check_input(data = peak_data,show_peaks = T, col= "red") # If show_peaks = T, a histogram of peaks is plotted
test
?gc_heatmap
gc_heatmap(aligned_peak_data,threshold = 0.01, samples_subset = 1:20, substance_subset = 1:30, label_size = 10) # By default a threshold of 0.05 is used to mark deviations
gc_heatmap(aligned_peak_data,threshold = 0.01, samples_subset = 1:20, substance_subset = 1:30, label_size = 10, type = "continous") # By default a threshold of 0.05 is used to mark deviations
```
?`GCalignR-package`
install.packages("pander")
library(GCalignR)
# Seal scent data
data("peak_data")
# Data is organized in one list of data.frames
str(peak_data[1:2])
check_input(peak_data)
#> All checks passed!
#> Ready for processing with align_chromatograms
library(GCalignR)
seal_aligned <- aligned_peak_data
print(seal_aligned)
print(seal_aligned)
plot(seal_aligned)
install.packages("rticles")
install.packages("rticles")
knit_with_parameters('~/Dropbox/projects/current/GCalignR/GCalignR_paper/ottensmann-stoffel-hoffman/ottensmann-stoffel-hoffman.Rmd')
library(GCalignR)
?align_chromatograms
library(GCalignR)
data("peak_data")
str(peak_data[1:2])
?align_chromatograms
<<<<<<< HEAD
plot(seal_aligned)
knitr::opts_chunk$set(echo = TRUE)
library(GCalignR)
check_input("data/bbim.text")
getwd()
knitr::opts_chunk$set(echo = TRUE)
check_input("data/bbim.txt")
load("~/GitHub/GCalignR_paper/ottensmann-stoffel-hoffman/Supplementary-A/data/bfla_aligned.RData")
plot(bfla)
gc_heatmap(bfla)
load("~/GitHub/GCalignR_paper/ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_aligned.RData")
gc_heatmap(bbim)
plot(bbim)
load("~/GitHub/GCalignR_paper/ottensmann-stoffel-hoffman/Supplementary-A/data/beph_aligned.RData")
plot(beph)
gc_heatmap(beph)
bfla
bfla$aligned
View(bfla$aligned$RT)
rm(list = ls())
library(GCalignR)
bbim_ms <- read.table("data/bbim_ms.txt")
getwd()
bbim_ms <- read.table("ottensmann-stoffel-hoffman/data/bbim_ms.txt")
bbim_ms <- read.table("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt")
bbim_ms <- read.table("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt",sep = ";")
head(bbim_ms)
bbim_ms <- read.table("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt",sep = "\t")
head(bbim_ms)
View(x = bbim_ms)
load("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_aligned.RData")
bbim <- bbim$aligned$RT
head(bbim)
View(bbim)
rm(list = ls())
library(GCalignR)
load("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_aligned.RData")
bbim <- bbim$aligned$RT
bbim_ms <- read.table("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt",sep = "\t")
rm(list = ls())
library(GCalignR)
load("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_aligned.RData")
bbim <- bbim$aligned$RT
head(bbim)
bbim_ms <- read.table("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt",sep = "\t",header = T)
head(bbim_ms)
str(bbim_ms)
round(bbim_ms[,2:ncol(bbim_ms)],digits = 2)
bbim_ms[,2:ncol(bbim_ms)] <- round(bbim_ms[,2:ncol(bbim_ms)],digits = 2)
bbim_ms[,2:ncol(bbim_ms)] <- round(bbim_ms[,2:ncol(bbim_ms)],digits = 2)
View(bbim)
nrow(bbim_ms)
apply(bbim_ms[2:ncol(bbim_ms)],MARGIN = 2,diff)
View(apply(bbim_ms[2:ncol(bbim_ms)],MARGIN = 2,diff))
a <- bbim[,2:10]
b <- bbim_ms[,3:10]
a <- bbim[,2:10]
b <- bbim_ms[,3:11]
a
View(a)
View(b)
as.list(a)
rm(list = ls())
library(GCalignR)
load("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_aligned.RData")
bbim <- bbim$aligned$RT
bbim_ms <- read.table("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt",sep = "\t",header = T)
bbim_ms[,2:ncol(bbim_ms)] <- round(bbim_ms[,2:ncol(bbim_ms)],digits = 2)
aligned <- bbim[,2:10]
ms <- bbim_ms[,3:11]
a <- as.list(aligned)
b <- as.list(ms)
aligned <- as.list(aligned)
ms <- as.list(ms)
a <- aligned$BBIM01
b <- ms$BBIM01
a %in% b
which(a %in% b)
a
b
names(a)
a
names(aligned)
a <- aligned[1]
a
names(a)
a
which(a %in% b)
a
which(as.vector(a) %in% b)
which(a %in% b)
b
a
class(a)
class(b)
which(as.data.frame(a) %in% b)
aligned <- as.list(bbim[,2:10])
ms <- as.list(bbim_ms[,3:11])
a <- aligned[1]
b <- ms[1]
a
b
which(a %in% b)
a <- aligned[[1]]
a <- aligned[[1]]
b <- ms[[1]]
which(a %in% b)
x <- function(a,b) {
which(a %in% b)
}
x(a,b)
x(aligned,b)
l <- aligned[1]
l
l[[1]]
x <- function(a,b) {
a <- [[1]]
b <- [[1]]
which(a %in% b)
}
x <- function(a,b) {
a <- a[[1]]
b <- a[[1]]
which(a %in% b)
}
x(a,b)
rm(list = ls())
library(GCalignR)
load("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_aligned.RData")
bbim <- bbim$aligned$RT
bbim_ms <- read.table("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt",sep = "\t",header = T)
bbim_ms[,2:ncol(bbim_ms)] <- round(bbim_ms[,2:ncol(bbim_ms)],digits = 2)
rm(list = ls())
library(GCalignR)
load("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_aligned.RData")
bbim <- bbim$aligned$RT
bbim_ms <- read.table("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt",sep = "\t",header = T)
bbim_ms[,2:ncol(bbim_ms)] <- round(bbim_ms[,2:ncol(bbim_ms)],digits = 2)
aligned <- as.list(bbim[,2:ncol(bbim)])
ms <- as.list(bbim_ms[,3:ncol(ms)])
ms <- as.list(bbim_ms[,3:ncol(bbim_ms)])
length(aligned)
indices <- list()
for (i in 1:length(aligned)) {
indices <- append(indices,list(which(aligned[[i]] %in% ms[[i]])))
}
indices
names(indices) <- names(aligned)
indices
indices
unlist(indices)
x <- unique(as.vector(unlist(indices)))
x
sort(x)
x <- sort(unique(as.vector(unlist(indices))))
x
length(x)
View(bbim[x,])
a <- bbim_ms$BBIM01
a
ncol(ms[[1]])
ms[[1]]
length(ms[[1]])
i <- 1
n <- 1
aligned[[i]]
n
ms[[i]][n]
which(aligned[[i]] == ms[[i]][n])
merge
merge
merge <- aligned
merge
merge <- bbim[,2:ncol(bbim)
]
merge <- bbim[,2:ncol(bbim)]
merge[i,n]
i
b
n
View(merge)
which(aligned[[i]] == ms[[i]][n])
merge[i,which(aligned[[i]] == ms[[i]][n])] <- 2
merge <- bbim[,2:ncol(bbim)]
i
n
ms[[i]][n])]
ms[[i]][n])
ms[[i]][n]
which(aligned[[i]] == ms[[i]][n])
aligned[[i]]
if (!is.na(ms[[i]][n])) merge[i,which(aligned[[i]] == ms[[i]][n])] <- 2
merge <- bbim[,2:ncol(bbim)]
for (i in 1:length(ms)) {
for (n in 1:length(ms[[1]]))
if (!is.na(ms[[i]][n])) merge[i,which(aligned[[i]] == ms[[i]][n])] <- n
}
merge <- bbim[,2:ncol(bbim)]
i <- 1
1:length(ms)
length(ms[[1]])
i <- 1
merge <- bbim[,2:ncol(bbim)]
i <- 1
merge <- bbim[,2:ncol(bbim)]
for (n in 1:length(ms[[1]])) # All substances
merge <- bbim[,2:ncol(bbim)]
for (i in 1:length(ms)) { # All samples
for (n in 1:length(ms[[1]])) { # All substances
if (!is.na(ms[[i]][n])) merge[which(aligned[[i]] == ms[[i]][n]),i] <- n
}
}
aligned <- as.list(bbim[,2:ncol(bbim)])[1:3]
rm(list = ls())
library(GCalignR)
load("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_aligned.RData")
bbim <- bbim$aligned$RT
bbim_ms <- read.table("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt",sep = "\t",header = T)
bbim_ms[,2:ncol(bbim_ms)] <- round(bbim_ms[,2:ncol(bbim_ms)],digits = 2)
aligned <- as.list(bbim[,2:ncol(bbim)])[1:3]
ms <- as.list(bbim_ms[,3:ncol(bbim_ms)])[1:3]
View(aligned)
View(ms)
merge <- bbim[,2:4]
for (i in 1:length(ms)) { # All samples
for (n in 1:length(ms[[1]])) { # All substances
if (!is.na(ms[[i]][n])) merge[which(aligned[[i]] == ms[[i]][n]),i] <- n
}
}
View(merge)
merge <- bbim[,2:4]
for (i in 1:length(ms)) { # All samples
for (n in 1:length(ms[[1]])) { # All substances
if (!is.na(ms[[i]][n])) merge[which(aligned[[i]] == ms[[i]][n]),i] <- paste0("r",as.character(n))
}
}
indices
indices <- list()
for (i in 1:length(aligned)) {
indices <- append(indices,list(which(aligned[[i]] %in% ms[[i]])))
}
names(indices) <- names(aligned)
indices
indices <-
unlist(indices)
indices <- list()
for (i in 1:length(aligned)) {
indices <- append(indices,list(which(aligned[[i]] %in% ms[[i]])))
}
unlist(indices)
sort(unique(unlist(indices)))
rm(list = ls())
library(GCalignR)
load("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_aligned.RData")
bbim <- bbim$aligned$RT
bbim_ms <- read.table("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt",sep = "\t",header = T)
bbim_ms[,2:ncol(bbim_ms)] <- round(bbim_ms[,2:ncol(bbim_ms)],digits = 2)
aligned <- as.list(bbim[,2:ncol(bbim)])[1:3]
ms <- as.list(bbim_ms[,3:ncol(bbim_ms)])[1:3]
indices <- list()
for (i in 1:length(aligned)) {
indices <- append(indices,list(which(aligned[[i]] %in% ms[[i]])))
}
rows <- sort(unique(unlist(indices)))
aligned <- as.list(bbim[rows,2:ncol(bbim)])[1:3]
ms <- as.list(bbim_ms[rows,3:ncol(bbim_ms)])[1:3]
### Calculating error rate in peak alignment based on substances identified by mass-spektrometry
### ============================================================================================
rm(list = ls())
library(GCalignR)
## aligned data
load("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_aligned.RData")
bbim <- bbim$aligned$RT
## MS-data
bbim_ms <- read.table("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt",sep = "\t",header = T)
## Two decimals
bbim_ms[,2:ncol(bbim_ms)] <- round(bbim_ms[,2:ncol(bbim_ms)],digits = 2)
aligned <- as.list(bbim[,2:ncol(bbim)])[1:3]
ms <- as.list(bbim_ms[,3:ncol(bbim_ms)])[1:3]
## delete redundant rows which contain data on unknown substances only
indices <- list()
for (i in 1:length(aligned)) {
indices <- append(indices,list(which(aligned[[i]] %in% ms[[i]])))
}
rows <- sort(unique(unlist(indices)))
## update the lists
aligned <- as.list(bbim[rows,2:ncol(bbim)])[1:3]
ms <- as.list(bbim_ms[rows,3:ncol(bbim_ms)])[1:3]
merge <- bbim[rows,2:ncol(bbim)]
merge <- bbim[rows,2:4]
for (i in 1:length(ms)) { # All samples
for (n in 1:length(ms[[1]])) { # All substances
if (!is.na(ms[[i]][n])) merge[which(aligned[[i]] == ms[[i]][n]),i] <- paste0("r",as.character(n))
}
}
rm(list = ls())
library(GCalignR)
load("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_aligned.RData")
bbim <- bbim$aligned$RT
bbim_ms <- read.table("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt",sep = "\t",header = T)
bbim_ms[,2:ncol(bbim_ms)] <- round(bbim_ms[,2:ncol(bbim_ms)],digits = 2)
aligned <- as.list(bbim[,2:ncol(bbim)])
ms <- as.list(bbim_ms[,3:ncol(bbim_ms)])
indices <- list()
for (i in 1:length(aligned)) {
indices <- append(indices,list(which(aligned[[i]] %in% ms[[i]])))
}
rows <- sort(unique(unlist(indices)))
aligned <- as.list(bbim[rows,2:ncol(bbim)])
ms <- as.list(bbim_ms[rows,3:ncol(bbim_ms)])
merge <- bbim[rows,2:ncol(bbim)]
merge <- bbim[rows,2:4]
for (i in 1:length(ms)) { # All samples
for (n in 1:length(ms[[1]])) { # All substances
if (!is.na(ms[[i]][n])) merge[which(aligned[[i]] == ms[[i]][n]),i] <- paste0("r",as.character(n))
}
}
### Calculating error rate in peak alignment based on substances identified by mass-spektrometry
### ============================================================================================
rm(list = ls())
library(GCalignR)
## aligned data
load("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_aligned.RData")
bbim <- bbim$aligned$RT
## MS-data
bbim_ms <- read.table("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt",sep = "\t",header = T)
## Two decimals
bbim_ms[,2:ncol(bbim_ms)] <- round(bbim_ms[,2:ncol(bbim_ms)],digits = 2)
aligned <- as.list(bbim[,2:ncol(bbim)])
ms <- as.list(bbim_ms[,3:ncol(bbim_ms)])
## delete redundant rows which contain data on unknown substances only
indices <- list()
for (i in 1:length(aligned)) {
indices <- append(indices,list(which(aligned[[i]] %in% ms[[i]])))
}
rows <- sort(unique(unlist(indices)))
## update the lists
aligned <- as.list(bbim[rows,2:ncol(bbim)])
ms <- as.list(bbim_ms[rows,3:ncol(bbim_ms)])
merge <- bbim[rows,2:ncol(bbim)]
merge <- bbim[rows,2:4]
for (i in 1:length(ms)) { # All samples
for (n in 1:length(ms[[1]])) { # All substances
if (!is.na(ms[[i]][n])) merge[which(aligned[[i]] == ms[[i]][n]),i] <- n*1000
}
}
rows
aligned
View(bbim[rows,2:ncol(bbim)])
=======
>>>>>>> e72bbce8dbd6048473595cf22307b505dc8ee746
