cleanbib()
cite_options(citation_format = "pandoc", check.entries = FALSE)
library(bibtex)
library(pander)
knitr::opts_chunk$set(collapse = TRUE, comment = "#>", cache = FALSE)
# if packages are not installed, load them from CRAN
wants <- c("vegan","ggplot2","gridExtra","grid")
has   <- wants %in% rownames(installed.packages())
if (any(!has)) install.packages(wants[!has])
library(GCalignR)
library(ggplot2)
library(vegan)
library(gridExtra)
library(grid)
check_input(data = "data/d1/Table_S1_raw.txt")
# chemical data
data("peak_data")
# corresponding factors
data("peak_factors")
pander::pandoc.table(head(peak_factors), caption = "Factors for Seal data")
bumble_bee_aligned <- align_chromatograms(data = "data/bumblee_bee_input.txt",
conc_col_name = "Area",
max_diff_peak2mean = 0.02,
min_diff_peak2peak = 0.05,
max_linear_shift = 0.05,
rt_col_name = "RT",
delete_single_peak = T)
# The alignment was performed in 3:30 minutes.
load(file = "data/bumble_bee_aligned.RData")
# The computation took 24:59 Minutes
load(file = "data/d1/seal_aligned.RData")
plot.bee1 <- gc_heatmap(bumble_bee_aligned, threshold = 0.07, main_title = paste("Bumblee bee data"),
label = F)
plot.seal1 <- gc_heatmap(seal_aligned, threshold = 0.07, main_title = "Fur seal data",
label = F, show_legend = F)
heatmaps <- gridExtra::grid.arrange(plot.bee1,plot.seal1)
grid::grid.newpage()
grid::grid.draw(heatmaps)
plot(seal_aligned)
# normalise abundancies within samples
bumble_bee_scent <- GCalignR::norm_peaks(bumble_bee_aligned,conc_col_name = "Area",rt_col_name = "RT",out = "data.frame")
# Log + 1 Transformation
bumble_bee_scent <- log(bumble_bee_scent + 1)
bumble_bee_scent <- bumble_bee_scent[match(row.names(bee_factors),row.names(bumble_bee_scent)),]
## Load factors
bee_factors <- read.csv("data/d1/Table_S1_factors.csv",sep = ";")
row.names(bee_factors) <- bee_factors[["ID"]]
# In total 55 samples are available
pander::pandoc.table(bee_factors[c(1:2,25:26,45:46),], caption = "Factors for Bumble bee data")
# normalise abundancies within samples
bumble_bee_scent <- GCalignR::norm_peaks(bumble_bee_aligned,conc_col_name = "Area",rt_col_name = "RT",out = "data.frame")
# Log + 1 Transformation
bumble_bee_scent <- log(bumble_bee_scent + 1)
bumble_bee_scent <- bumble_bee_scent[match(row.names(bee_factors),row.names(bumble_bee_scent)),]
# NMDS using bray-curtis in vegan
bumble_bee_scent_nmds <- vegan::metaMDS(comm = bumble_bee_scent,trymax = 9999)
# Get the coordinates
bumble_bee_scent_nmds <- as.data.frame(bumble_bee_scent_nmds$points)
bumble_bee_scent_nmds <- cbind(bumble_bee_scent_nmds,Species = bee_factors[["Species"]])
ggplot2::ggplot(data = bumble_bee_scent_nmds,ggplot2::aes(MDS1,MDS2,color = Species)) +
ggplot2::geom_point(size = 3) +
ggplot2::stat_ellipse(size = 2) +
ggplot2::labs(title = "", x = "MDS1", y = "MDS2") +
ggplot2::theme_bw(base_size = 14) +
ggplot2::theme(axis.ticks = element_blank(), axis.text = element_blank()) +
scale_colour_manual(values = RColorBrewer::brewer.pal(3,"Dark2"),
name = "",
breaks = c("bimaculatus", "ephippiatus", "flavifrons"),
labels = c("Bombus bimaculatus","B. ephippiatus","B. flavifrons"),
guide = guide_legend(label.theme = element_text(
face = "italic", angle = 0, size = 11)))
vegan::adonis(bumble_bee_scent ~ bee_factors$Species,permutations = 999)
# normalise abundancies within samples
seal_scent <- GCalignR::norm_peaks(seal_aligned,conc_col_name = "area",rt_col_name = "time",out = "data.frame")
# Log + 1 Transformation
seal_scent <- log(seal_scent + 1)
seal_scent <- seal_scent[match(row.names(peak_factors),row.names(seal_scent)),]
# NMDS using bray-curtis in vegan
seal_scent_nmds <- vegan::metaMDS(comm = seal_scent,trymax = 9999)
# Get the coordinates
seal_scent_nmds <- as.data.frame(seal_scent_nmds$points)
seal_scent_nmds <- cbind(seal_scent_nmds,colony = peak_factors[["colony"]])
ggplot2::ggplot(data = seal_scent_nmds,ggplot2::aes(MDS1,MDS2,color = colony)) +
ggplot2::geom_point(size = 3) +
ggplot2::stat_ellipse(size = 2) +
ggplot2::labs(title = "", x = "MDS1", y = "MDS2") +
ggplot2::theme_bw(base_size = 14) +
ggplot2::theme(axis.ticks = element_blank(), axis.text = element_blank()) +
scale_colour_manual(values = RColorBrewer::brewer.pal(3,"Dark2")[c(1,2)],
name = "",
breaks = c("FWB", "SSB"),
labels = c("Freshwater beach","Special study beach"),
guide = guide_legend(label.theme = element_text(
face = "italic", angle = 0, size = 11)))
library(GCalignR)
gc_heatmap(aligned_peak_data)
gc_heatmap(aligned_peak_data, legend_type = "gradient")
gc_heatmap(aligned_peak_data, legend_type = "colourbar")
gc_heatmap(aligned_peak_data, legend_type = "colourbar", threshold = 0.02)
gc_heatmap(aligned_peak_data, legend_type = "legend", threshold = 0.02)
installed.packages(rticles)
installed.packages("rticles")
install.packages("rticles")
install.packages("rticles")
seal_aligned
rm(list = ls())
library(GCalignR)
library(GCalignR)
library(GCalignR)
# Seal scent data
data("peak_data")
# Data is organized in one list of data.frames
str(peak_data[1:2])
check_input(peak_data)
#> All checks passed!
#> Ready for processing with align_chromatograms
library(GCalignR)
# Seal scent data
data("peak_data")
# Data is organized in one list of data.frames
str(peak_data[1:2])
check_input(peak_data)
#> All checks passed!
#> Ready for processing with align_chromatograms
print(seal_aligned)
library(GCalignR)
seal_aligned <- aligned_peak_data
print(seal_aligned)
plot(seal_aligned)
install.packages(c("ggplot2", "inbreedR", "knitcitations", "knitr", "plyr", "rmarkdown"))
library(GCalignR)
GCalignR::
?GCalignR
library(GCalignR)
check_input(peak_data)
check_input(peak_data,list_peaks = T)
save(seal_aligned,file = "seal_aligned.RData")
gc_heatmap(seal_aligned,type = "continuous")
plot(seal_aligned)
library(GCalignR)
# Seal scent data
data("peak_data")
# Data is organized in one list of data frames
str(peak_data[1:2])
check_input(peak_data)
seal_aligned <- align_chromatograms(data = peak_data,
conc_col_name = "area",
max_diff_peak2mean = 0.03,
min_diff_peak2peak = 0.05,
max_linear_shift = 0.05,
rt_col_name = "time",
delete_single_peak = TRUE,
blanks = c("C2","C3")) # negativ controls
load(seal_aligned.RData)
getwd()
load("seal_aligned.RData")
plot(seal_aligned)
gc_heatmap(seal_aligned,type = "continuous", substance_subset = 1:10, samples_subset = 1:10)
plot(seal_aligned)
gc_heatmap(seal_aligned,type = "continuous", substance_subset = 1:25, samples_subset = 1:25)
library(GCalignR))
library(GCalignR)
?align_chromatograms
plot(seal_aligned)
knitr::opts_chunk$set(echo = TRUE)
library(GCalignR)
check_input("data/bbim.text")
getwd()
knitr::opts_chunk$set(echo = TRUE)
check_input("data/bbim.txt")
load("~/GitHub/GCalignR_paper/ottensmann-stoffel-hoffman/Supplementary-A/data/bfla_aligned.RData")
plot(bfla)
gc_heatmap(bfla)
load("~/GitHub/GCalignR_paper/ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_aligned.RData")
gc_heatmap(bbim)
plot(bbim)
load("~/GitHub/GCalignR_paper/ottensmann-stoffel-hoffman/Supplementary-A/data/beph_aligned.RData")
plot(beph)
gc_heatmap(beph)
bfla
bfla$aligned
View(bfla$aligned$RT)
rm(list = ls())
library(GCalignR)
bbim_ms <- read.table("data/bbim_ms.txt")
getwd()
bbim_ms <- read.table("ottensmann-stoffel-hoffman/data/bbim_ms.txt")
bbim_ms <- read.table("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt")
bbim_ms <- read.table("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt",sep = ";")
head(bbim_ms)
bbim_ms <- read.table("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt",sep = "\t")
head(bbim_ms)
View(x = bbim_ms)
load("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_aligned.RData")
bbim <- bbim$aligned$RT
head(bbim)
View(bbim)
rm(list = ls())
library(GCalignR)
load("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_aligned.RData")
bbim <- bbim$aligned$RT
bbim_ms <- read.table("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt",sep = "\t")
rm(list = ls())
library(GCalignR)
load("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_aligned.RData")
bbim <- bbim$aligned$RT
head(bbim)
bbim_ms <- read.table("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt",sep = "\t",header = T)
head(bbim_ms)
str(bbim_ms)
round(bbim_ms[,2:ncol(bbim_ms)],digits = 2)
bbim_ms[,2:ncol(bbim_ms)] <- round(bbim_ms[,2:ncol(bbim_ms)],digits = 2)
bbim_ms[,2:ncol(bbim_ms)] <- round(bbim_ms[,2:ncol(bbim_ms)],digits = 2)
View(bbim)
nrow(bbim_ms)
apply(bbim_ms[2:ncol(bbim_ms)],MARGIN = 2,diff)
View(apply(bbim_ms[2:ncol(bbim_ms)],MARGIN = 2,diff))
a <- bbim[,2:10]
b <- bbim_ms[,3:10]
a <- bbim[,2:10]
b <- bbim_ms[,3:11]
a
View(a)
View(b)
as.list(a)
rm(list = ls())
library(GCalignR)
load("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_aligned.RData")
bbim <- bbim$aligned$RT
bbim_ms <- read.table("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt",sep = "\t",header = T)
bbim_ms[,2:ncol(bbim_ms)] <- round(bbim_ms[,2:ncol(bbim_ms)],digits = 2)
aligned <- bbim[,2:10]
ms <- bbim_ms[,3:11]
a <- as.list(aligned)
b <- as.list(ms)
aligned <- as.list(aligned)
ms <- as.list(ms)
a <- aligned$BBIM01
b <- ms$BBIM01
a %in% b
which(a %in% b)
a
b
names(a)
a
names(aligned)
a <- aligned[1]
a
names(a)
a
which(a %in% b)
a
which(as.vector(a) %in% b)
which(a %in% b)
b
a
class(a)
class(b)
which(as.data.frame(a) %in% b)
aligned <- as.list(bbim[,2:10])
ms <- as.list(bbim_ms[,3:11])
a <- aligned[1]
b <- ms[1]
a
b
which(a %in% b)
a <- aligned[[1]]
a <- aligned[[1]]
b <- ms[[1]]
which(a %in% b)
x <- function(a,b) {
which(a %in% b)
}
x(a,b)
x(aligned,b)
l <- aligned[1]
l
l[[1]]
x <- function(a,b) {
a <- [[1]]
b <- [[1]]
which(a %in% b)
}
x <- function(a,b) {
a <- a[[1]]
b <- a[[1]]
which(a %in% b)
}
x(a,b)
rm(list = ls())
library(GCalignR)
load("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_aligned.RData")
bbim <- bbim$aligned$RT
bbim_ms <- read.table("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt",sep = "\t",header = T)
bbim_ms[,2:ncol(bbim_ms)] <- round(bbim_ms[,2:ncol(bbim_ms)],digits = 2)
rm(list = ls())
library(GCalignR)
load("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_aligned.RData")
bbim <- bbim$aligned$RT
bbim_ms <- read.table("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt",sep = "\t",header = T)
bbim_ms[,2:ncol(bbim_ms)] <- round(bbim_ms[,2:ncol(bbim_ms)],digits = 2)
aligned <- as.list(bbim[,2:ncol(bbim)])
ms <- as.list(bbim_ms[,3:ncol(ms)])
ms <- as.list(bbim_ms[,3:ncol(bbim_ms)])
length(aligned)
indices <- list()
for (i in 1:length(aligned)) {
indices <- append(indices,list(which(aligned[[i]] %in% ms[[i]])))
}
indices
names(indices) <- names(aligned)
indices
indices
unlist(indices)
x <- unique(as.vector(unlist(indices)))
x
sort(x)
x <- sort(unique(as.vector(unlist(indices))))
x
length(x)
View(bbim[x,])
a <- bbim_ms$BBIM01
a
ncol(ms[[1]])
ms[[1]]
length(ms[[1]])
i <- 1
n <- 1
aligned[[i]]
n
ms[[i]][n]
which(aligned[[i]] == ms[[i]][n])
merge
merge
merge <- aligned
merge
merge <- bbim[,2:ncol(bbim)
]
merge <- bbim[,2:ncol(bbim)]
merge[i,n]
i
b
n
View(merge)
which(aligned[[i]] == ms[[i]][n])
merge[i,which(aligned[[i]] == ms[[i]][n])] <- 2
merge <- bbim[,2:ncol(bbim)]
i
n
ms[[i]][n])]
ms[[i]][n])
ms[[i]][n]
which(aligned[[i]] == ms[[i]][n])
aligned[[i]]
if (!is.na(ms[[i]][n])) merge[i,which(aligned[[i]] == ms[[i]][n])] <- 2
merge <- bbim[,2:ncol(bbim)]
for (i in 1:length(ms)) {
for (n in 1:length(ms[[1]]))
if (!is.na(ms[[i]][n])) merge[i,which(aligned[[i]] == ms[[i]][n])] <- n
}
merge <- bbim[,2:ncol(bbim)]
i <- 1
1:length(ms)
length(ms[[1]])
i <- 1
merge <- bbim[,2:ncol(bbim)]
i <- 1
merge <- bbim[,2:ncol(bbim)]
for (n in 1:length(ms[[1]])) # All substances
merge <- bbim[,2:ncol(bbim)]
for (i in 1:length(ms)) { # All samples
for (n in 1:length(ms[[1]])) { # All substances
if (!is.na(ms[[i]][n])) merge[which(aligned[[i]] == ms[[i]][n]),i] <- n
}
}
aligned <- as.list(bbim[,2:ncol(bbim)])[1:3]
rm(list = ls())
library(GCalignR)
load("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_aligned.RData")
bbim <- bbim$aligned$RT
bbim_ms <- read.table("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt",sep = "\t",header = T)
bbim_ms[,2:ncol(bbim_ms)] <- round(bbim_ms[,2:ncol(bbim_ms)],digits = 2)
aligned <- as.list(bbim[,2:ncol(bbim)])[1:3]
ms <- as.list(bbim_ms[,3:ncol(bbim_ms)])[1:3]
View(aligned)
View(ms)
merge <- bbim[,2:4]
for (i in 1:length(ms)) { # All samples
for (n in 1:length(ms[[1]])) { # All substances
if (!is.na(ms[[i]][n])) merge[which(aligned[[i]] == ms[[i]][n]),i] <- n
}
}
View(merge)
merge <- bbim[,2:4]
for (i in 1:length(ms)) { # All samples
for (n in 1:length(ms[[1]])) { # All substances
if (!is.na(ms[[i]][n])) merge[which(aligned[[i]] == ms[[i]][n]),i] <- paste0("r",as.character(n))
}
}
indices
indices <- list()
for (i in 1:length(aligned)) {
indices <- append(indices,list(which(aligned[[i]] %in% ms[[i]])))
}
names(indices) <- names(aligned)
indices
indices <-
unlist(indices)
indices <- list()
for (i in 1:length(aligned)) {
indices <- append(indices,list(which(aligned[[i]] %in% ms[[i]])))
}
unlist(indices)
sort(unique(unlist(indices)))
rm(list = ls())
library(GCalignR)
load("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_aligned.RData")
bbim <- bbim$aligned$RT
bbim_ms <- read.table("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt",sep = "\t",header = T)
bbim_ms[,2:ncol(bbim_ms)] <- round(bbim_ms[,2:ncol(bbim_ms)],digits = 2)
aligned <- as.list(bbim[,2:ncol(bbim)])[1:3]
ms <- as.list(bbim_ms[,3:ncol(bbim_ms)])[1:3]
indices <- list()
for (i in 1:length(aligned)) {
indices <- append(indices,list(which(aligned[[i]] %in% ms[[i]])))
}
rows <- sort(unique(unlist(indices)))
aligned <- as.list(bbim[rows,2:ncol(bbim)])[1:3]
ms <- as.list(bbim_ms[rows,3:ncol(bbim_ms)])[1:3]
### Calculating error rate in peak alignment based on substances identified by mass-spektrometry
### ============================================================================================
rm(list = ls())
library(GCalignR)
## aligned data
load("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_aligned.RData")
bbim <- bbim$aligned$RT
## MS-data
bbim_ms <- read.table("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt",sep = "\t",header = T)
## Two decimals
bbim_ms[,2:ncol(bbim_ms)] <- round(bbim_ms[,2:ncol(bbim_ms)],digits = 2)
aligned <- as.list(bbim[,2:ncol(bbim)])[1:3]
ms <- as.list(bbim_ms[,3:ncol(bbim_ms)])[1:3]
## delete redundant rows which contain data on unknown substances only
indices <- list()
for (i in 1:length(aligned)) {
indices <- append(indices,list(which(aligned[[i]] %in% ms[[i]])))
}
rows <- sort(unique(unlist(indices)))
## update the lists
aligned <- as.list(bbim[rows,2:ncol(bbim)])[1:3]
ms <- as.list(bbim_ms[rows,3:ncol(bbim_ms)])[1:3]
merge <- bbim[rows,2:ncol(bbim)]
merge <- bbim[rows,2:4]
for (i in 1:length(ms)) { # All samples
for (n in 1:length(ms[[1]])) { # All substances
if (!is.na(ms[[i]][n])) merge[which(aligned[[i]] == ms[[i]][n]),i] <- paste0("r",as.character(n))
}
}
rm(list = ls())
library(GCalignR)
load("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_aligned.RData")
bbim <- bbim$aligned$RT
bbim_ms <- read.table("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt",sep = "\t",header = T)
bbim_ms[,2:ncol(bbim_ms)] <- round(bbim_ms[,2:ncol(bbim_ms)],digits = 2)
aligned <- as.list(bbim[,2:ncol(bbim)])
ms <- as.list(bbim_ms[,3:ncol(bbim_ms)])
indices <- list()
for (i in 1:length(aligned)) {
indices <- append(indices,list(which(aligned[[i]] %in% ms[[i]])))
}
rows <- sort(unique(unlist(indices)))
aligned <- as.list(bbim[rows,2:ncol(bbim)])
ms <- as.list(bbim_ms[rows,3:ncol(bbim_ms)])
merge <- bbim[rows,2:ncol(bbim)]
merge <- bbim[rows,2:4]
for (i in 1:length(ms)) { # All samples
for (n in 1:length(ms[[1]])) { # All substances
if (!is.na(ms[[i]][n])) merge[which(aligned[[i]] == ms[[i]][n]),i] <- paste0("r",as.character(n))
}
}
### Calculating error rate in peak alignment based on substances identified by mass-spektrometry
### ============================================================================================
rm(list = ls())
library(GCalignR)
## aligned data
load("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_aligned.RData")
bbim <- bbim$aligned$RT
## MS-data
bbim_ms <- read.table("ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt",sep = "\t",header = T)
## Two decimals
bbim_ms[,2:ncol(bbim_ms)] <- round(bbim_ms[,2:ncol(bbim_ms)],digits = 2)
aligned <- as.list(bbim[,2:ncol(bbim)])
ms <- as.list(bbim_ms[,3:ncol(bbim_ms)])
## delete redundant rows which contain data on unknown substances only
indices <- list()
for (i in 1:length(aligned)) {
indices <- append(indices,list(which(aligned[[i]] %in% ms[[i]])))
}
rows <- sort(unique(unlist(indices)))
## update the lists
aligned <- as.list(bbim[rows,2:ncol(bbim)])
ms <- as.list(bbim_ms[rows,3:ncol(bbim_ms)])
merge <- bbim[rows,2:ncol(bbim)]
merge <- bbim[rows,2:4]
for (i in 1:length(ms)) { # All samples
for (n in 1:length(ms[[1]])) { # All substances
if (!is.na(ms[[i]][n])) merge[which(aligned[[i]] == ms[[i]][n]),i] <- n*1000
}
}
rows
aligned
View(bbim[rows,2:ncol(bbim)])
