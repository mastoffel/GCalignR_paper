y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
main = "Bombus bimaculatus\nn = 717",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 2,
zlim = c(0,0.2)))
with(errors_bbim,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 1,
theta = 30,
phi = 0,
ticktype = "detailed",
main = "Bombus bimaculatus\nn = 717",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 2,
zlim = c(0,0.2)))
with(errors_bbim,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 1,
theta = 30,
ticktype = "detailed",
main = "Bombus bimaculatus\nn = 717",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 2,
zlim = c(0,0.2)))
with(errors_bbim,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 1,
theta = 30,
phi = 0,
ticktype = "detailed",
main = "Bombus bimaculatus\nn = 717",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 2,
zlim = c(0,0.2)))
with(errors_bbim,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 1,
theta = 30,
phi = 0,
ticktype = "detailed",
main = substitute(paste(italic("Bombus bimaculatus"),"\nn = 717")),
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 2,
zlim = c(0,0.2)))
with(errors_bbim,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 2,
zlim = c(0,0.2)))
with(errors_bbim,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
xlab = "",
ylab = "",
zlab = "",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 2,
zlim = c(0,0.2)))
dev.off()
with(errors_bbim,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
xlab = "",
ylab = "",
zlab = "",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 2,
zlim = c(0,0.2)))
with(errors_bbim,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
xlab = "",
ylab = "",
zlab = "",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1,
cex.axis = 1.25,
cex.main = 2,
zlim = c(0,0.2)))
with(errors_bbim,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
xlab = "",
ylab = "",
zlab = "",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.axis = 1.25,
zlim = c(0,0.2)))
with(errors_bbim,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
xlab = "",
ylab = "",
zlab = "",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.axis = 1,
zlim = c(0,0.2)))
with(errors_bbim,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
xlab = "",
ylab = "",
zlab = "",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.axis = 1,
zlim = c(0,0.2)))
?scatter3D
scatter3D()
scatter3D
View(scatter3D)
View(plot3D:::splitdotpersp)
with(errors_bbim,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
xlab = "",
ylab = "",
zlab = "",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.axis = 1,
zlim = c(0,0.2)))
with(errors_beph,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
xlab = "",
ylab = "",
zlab = "",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.axis = 1,
zlim = c(0,0.2)))
with(errors_bfla,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
xlab = "",
ylab = "",
zlab = "",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.axis = 1,
zlim = c(0,0.2)))
gc_heatmap(aligned_peak_data)
rm(list = ls())
area <- as.data.frame(as.list(aligned_peak_data[["aligned"]][["area"]]))
area <- as.data.frame(as.list(aligned_peak_data[["aligned"]][["area"]][2:83]))
mean_rt <- round(aligned_peak_data[["aligned"]][["time"]][["mean_RT"]])
mean_rt
mean_rt <- round(aligned_peak_data[["aligned"]][["time"]][["mean_RT"]],2)
mean_rt
any(duplicated(mean_rt))
area <- as.data.frame(as.list(aligned_peak_data[["aligned"]][["area"]][2:83]))
mean_rt <- round(aligned_peak_data[["aligned"]][["time"]][["mean_RT"]],2)
chromas <- lapply(1:ncol(area), function(x) as.data.frame(cbind(mean_rt,area[,x])))
names(chromas) <- names(area)
names(chromas)
chromas <- lapply(chromas, FUN = function(data, var_names) {
names(data) <- var_names}, var_names = c("rt","area"))
chromas <- lapply(chromas, remove_zero_area_peaks)
library(knitr)
knitr::opts_chunk$set(cache = FALSE, fig.width = 7, fig.height = 7,tidy = TRUE,highlight = TRUE,comment = "#>",strip.white = TRUE,collapse = TRUE,tidy = TRUE)
options(width = 55)
library(GCalignR)
library(ggplot2)
source("R/ChromaSimFunctions.R")
## The peak area is extracted of all chromatograms
area <- as.data.frame(as.list(aligned_peak_data[["aligned"]][["area"]][2:83]))
## Calculate the mean retention time for every substance, these are used for every sample!
mean_rt <- round(aligned_peak_data[["aligned"]][["time"]][["mean_RT"]],2)
## build a list of samples
chromas <- lapply(1:ncol(area), function(x) as.data.frame(cbind(mean_rt,area[,x])))
## rename every sample accordingly
names(chromas) <- names(area)
## name the variables "rt" and "area"
chromas <- lapply(chromas, FUN = function(data, var_names) {
names(data) <- var_names}, var_names = c("rt","area"))
## remove zero area peaks
chromas <- lapply(chromas, remove_zero_area_peaks)
chromas$M2
area <- as.data.frame(as.list(aligned_peak_data[["aligned"]][["area"]][2:83]))
mean_rt <- round(aligned_peak_data[["aligned"]][["time"]][["mean_RT"]],2)
chromas <- lapply(1:ncol(area), function(x) as.data.frame(cbind(mean_rt,area[,x])))
names(chromas) <- names(area)
chromas$M2
chromas <- lapply(chromas, FUN = function(x) names(x) <- c("time","area"))
chromas$M20
area <- as.data.frame(as.list(aligned_peak_data[["aligned"]][["area"]][2:83]))
mean_rt <- round(aligned_peak_data[["aligned"]][["time"]][["mean_RT"]],2)
names(chromas) <- names(area)
chromas <- lapply(chromas, FUN = function(x) {
names(x) <- c("time","area")
x})
chromas$M20
area <- as.data.frame(as.list(aligned_peak_data[["aligned"]][["area"]][2:83]))
mean_rt <- round(aligned_peak_data[["aligned"]][["time"]][["mean_RT"]],2)
chromas <- lapply(1:ncol(area), function(x) as.data.frame(cbind(mean_rt,area[,x])))
names(chromas) <- names(area)
chromas <- lapply(chromas, FUN = function(x) {
names(x) <- c("time","area")
x})
chromas$M2$time
x <- chromas[[1]]
x
x[x[["time"]] > 0,]
x[x[["time"]] > 0,]
## The peak area is extracted of all chromatograms
area <- as.data.frame(as.list(aligned_peak_data[["aligned"]][["area"]][2:83]))
## Calculate the mean retention time for every substance, these are used for every sample!
mean_rt <- round(aligned_peak_data[["aligned"]][["time"]][["mean_RT"]],2)
## build a list of samples
chromas <- lapply(1:ncol(area), function(x) as.data.frame(cbind(mean_rt,area[,x])))
## rename every sample accordingly
names(chromas) <- names(area)
## name the variables "rt" and "area"
chromas <- lapply(chromas, FUN = function(x) {
names(x) <- c("time","area")
x})
## remove zeros
chromas <- lapply(chromas, function(x) x[x[["time"]] > 0,])
chromas
lapply(chromas,length())
lapply(chromas,nrow)
## The peak area is extracted of all chromatograms
area <- as.data.frame(as.list(aligned_peak_data[["aligned"]][["area"]][2:83]))
## Calculate the mean retention time for every substance, these are used for every sample!
mean_rt <- round(aligned_peak_data[["aligned"]][["time"]][["mean_RT"]],2)
## build a list of samples
chromas <- lapply(1:ncol(area), function(x) as.data.frame(cbind(mean_rt,area[,x])))
## rename every sample accordingly
names(chromas) <- names(area)
## name the variables "rt" and "area"
chromas <- lapply(chromas, FUN = function(x) {
names(x) <- c("time","area")
x})
## remove zeros
chromas <- lapply(chromas, function(x) x[x[["area"]] > 0,])
lapply(chromas,nrow)
library(knitr)
knitr::opts_chunk$set(cache = FALSE, fig.width = 7, fig.height = 7,tidy = TRUE,highlight = TRUE,comment = "#>",strip.white = TRUE,collapse = TRUE,tidy = TRUE)
options(width = 55)
library(GCalignR)
library(ggplot2)
source("R/ChromaSimFunctions.R")
## The peak area is extracted of all chromatograms
area <- as.data.frame(as.list(aligned_peak_data[["aligned"]][["area"]][2:83]))
## Calculate the mean retention time for every substance, these are used for every sample!
mean_rt <- round(aligned_peak_data[["aligned"]][["time"]][["mean_RT"]],2)
## build a list of samples
chromas <- lapply(1:ncol(area), function(x) as.data.frame(cbind(mean_rt,area[,x])))
## rename every sample accordingly
names(chromas) <- names(area)
## name the variables "rt" and "area"
chromas <- lapply(chromas, FUN = function(x) {
names(x) <- c("time","area")
x})
## remove zero area peaks; i.e. absent peaks within single samples
chromas <- lapply(chromas, function(x) x[x[["area"]] > 0,])
out <- sim_linear_shift(Chromas = Chromas,shifts = c(-0.03,0.03))
out <- sim_linear_shift(chromas,shifts = c(-0.03,0.03))
out <- sim_linear_shift(chromas, rt_col_name = "time", shifts = c(-0.03,0.03))
ChromasLinShift <- out[["Chromas"]]
Applied_Shifts <- out[["Shifts"]]
Applied_Shifts
library(ggplot2)
\citep{Drea.2013}
library(ggplot2)
a <- gc_heatmap(aligned_peak_data,type = "binary",threshold = 0.05)
library(GCalignR)
a <- gc_heatmap(aligned_peak_data,type = "binary",threshold = 0.05)
a + theme(plot.background = element_rect(fill = "white"))
ggplot2::ggsave(a,filename = "ottensmann-stoffel-hoffman/figures/heatmap.png",width = 5,height = 5,units = "in",dpi = 300)
citation(package = "ggplot2")
?align_chromatograms
?GCalignR:::bfla
library(GCalignR)
GCalignR:::.__NAMESPACE__.
install.packages("plot3D")
library(devtools)
install.packages("devtools")
system("echo $PATH")
system("echo $PATH")
system()
path.expand()
Sys.getenv("PATH")
Sys.which("pdflatex")
R.home(component = "home")
path.expand("~")
R.home(component = "home")
Sys.which("pdflatex")
Sys.getenv("PATH")
Sys.which("R_homw")
Sys.which("R_home")
Sys.which("config")
Sys.which("pdflatex")
browseVignettes('GCalignR')
library(GCalignR)
fpath <- system.file("extdata","peak_data.txt", package = "GCalignR")
system.file("extdata","peak_data.txt", package = "GCalignR")
system.file("extdata","peak_data.txt","GCalignR")
system.file(subdirectory = "extdata", file = "peak_data.txt", package = "GCalignR")
fpath <- system.file(package = "GCalignR", file = "peak_data.txt", subdirectory = "extdata") # path to peak_data.txt
fpath
system.file(package = "GCalignR", file = "peak_data.txt", subdirectory = "extdata")
system.file(package = "GCalignR", "peak_data.txt", subdirectory = "extdata")
system.file(package = "GCalignR", "peak_data.txt", "extdata")
system.file("extdata","peak_data.txt","GCalignR")
system.file("extdata","peak_data.txt", package = "GCalignR")
system.file("extdata",file = "peak_data.txt", package = "GCalignR")
system.file(folder = "extdata",file = "peak_data.txt", package = "GCalignR")
system.file(file = "peak_data.txt", package = "GCalignR")
system.file(folder = "extdata",file = "peak_data.txt", package = "GCalignR")
system.file(dir = "extdata",file = "peak_data.txt", package = "GCalignR")
library(GCalignR) # loads the package
fpath <- system.file(package = "GCalignR",
file = "peak_data.txt",
dir = "extdata") # path to peak_data.txt
check_input(fpath) # checks the data
library(GCalignR) # loads the package
fpath <- system.file(package = "GCalignR",
file = "peak_data.txt",
dir = "extdata") # path to peak_data.txt
fpath
system.file(dir = "extdata",file = "peak_data.txt", package = "GCalignR")
library(GCalignR) # loads the package
fpath <- system.file(dir = "extdata",
file = "peak_data.txt",
package = "GCalignR") # path to peak_data.txt
check_input(fpath) # checks the data
library(GCalignR) # loads the package
fpath <- system.file(dir = "extdata",
file = "peak_data.txt",
package = "GCalignR") # path to peak_data.txt
check_input(fpath) # checks the data
library(GCalignR) # loads the package
fpath <- system.file(dir = "extdata",
file = "peak_data.txt",
package = "GCalignR") # path to peak_data.txt
check_input(fpath) # checks the data
print(aligned_peak_data) # verbal summary of the alignment procedure
print(aligned_peak_data) # verbal summary of the alignment procedure
print(aligned_peak_data) # verbal summary of the alignment procedure
library(GCalignR) # loads the package
fpath <- system.file(dir = "extdata",
file = "peak_data.txt",
package = "GCalignR") # path to peak_data.txt
check_input(fpath) # checks the data
print(aligned_peak_data) # verbal summary of the alignment procedure
scent <- norm_peaks(data = aligned_peak_data,
rt_col_name = "time", # retention times
conc_col_name = "area", # peak area
out = "data.frame" ) # returns a data frame
scent <- scent[match(row.names(peak_factors),
row.names(scent)),] # sort data
scent <- log(scent + 1) # log + 1 transformation
scent_nmds <- vegan::metaMDS(comm = scent,distance = "bray") # NMDS
install.packages("vegan")
library(GCalignR) # loads the package
fpath <- system.file(dir = "extdata",
file = "peak_data.txt",
package = "GCalignR") # path to peak_data.txt
check_input(fpath) # checks the data
print(aligned_peak_data) # verbal summary of the alignment procedure
scent <- norm_peaks(data = aligned_peak_data,
rt_col_name = "time", # retention times
conc_col_name = "area", # peak area
out = "data.frame" ) # returns a data frame
scent <- scent[match(row.names(peak_factors),
row.names(scent)),] # sort data
scent <- log(scent + 1) # log + 1 transformation
scent_nmds <- vegan::metaMDS(comm = scent,distance = "bray") # NMDS
scent_nmds <- as.data.frame(scent_nmds[["points"]]) # extract points
scent_nmds <- cbind(scent_nmds,
colony = peak_factors[["colony"]]) # add factors
plot(aligned_peak_data)
