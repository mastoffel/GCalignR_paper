data("peak_data")
data("peak_factors")
head(peak_factors)
pander::pandoc.table(bee_factors[c(1:2,25:26,45:46),])
pander::pandoc_table(head(peak_factors))
library(knitcitations)
cleanbib()
cite_options(citation_format = "pandoc", check.entries = FALSE)
library(bibtex)
library(pander)
knitr::opts_chunk$set(collapse = TRUE, comment = "#>", cache = FALSE)
library(GCalignR)
library(ggplot2)
library(vegan)
## Load factors
bee_factors <- read.csv("data/d1/Table_S1_factors.csv",sep = ";")
row.names(bee_factors) <- bee_factors[["ID"]]
# In total 55 samples are available
pander::pandoc.table(bee_factors[c(1:2,25:26,45:46),])
check_input(data = "data/d1/Table_S1_raw.txt")
# chemical data
data("peak_data")
# corresponding factors
data("peak_factors")
pander::pandoc_table(head(peak_factors))
# chemical data
data("peak_data")
# corresponding factors
data("peak_factors")
pander::pandoc.table(head(peak_factors))
## Load factors
bee_factors <- read.csv("data/d1/Table_S1_factors.csv",sep = ";")
row.names(bee_factors) <- bee_factors[["ID"]]
# In total 55 samples are available
pander::pandoc.table(bee_factors[c(1:2,25:26,45:46),], caption = "Factors for Bumble bee data")
print(bee_aligned)
3*60
+30
3*60+30
print(seal_aligned)
25*60
gc_heatmap(bee_aligned)
a <- gc_heatmap(bee_aligned)
class(x)
class(a)
plot_bee1 <- gc_heatmap(bee_aligned, threshold = 0.05, main_title = paste(italic("Bombus")))
plot_bee1 <- gc_heatmap(bee_aligned, threshold = 0.05, main_title = paste("Bombus",face="italic"))
plot_bee1
plot_bee1 <- gc_heatmap(bee_aligned, threshold = 0.05, main_title = text("Bombus",face ="italic"))
plot_bee1 <- gc_heatmap(bee_aligned, threshold = 0.05, main_title = paste("Bumblee bee data"))
plot_seal1 <- gc_heatmap(seal_aligned, threshold = 0.05, main_title = "Fur seal data")
plot_bee1
plot_seal11
plot_seal1
heatmaps <- gridExtra::grid.arrange(plot.bee1,plot.seal1)
plot.bee1 <- gc_heatmap(bee_aligned, threshold = 0.05, main_title = paste("Bumblee bee data"))
plot.seal1 <- gc_heatmap(seal_aligned, threshold = 0.05, main_title = "Fur seal data")
heatmaps <- gridExtra::grid.arrange(plot.bee1,plot.seal1)
heatmaps
draw(heatmaps)
grid.new()
grid::grid.newpage()
grid::grid.draw(heatmaps)
library(knitcitations)
cleanbib()
cite_options(citation_format = "pandoc", check.entries = FALSE)
library(bibtex)
library(pander)
knitr::opts_chunk$set(collapse = TRUE, comment = "#>", cache = FALSE)
library(GCalignR)
library(ggplot2)
library(vegan)
## Load factors
bee_factors <- read.csv("data/d1/Table_S1_factors.csv",sep = ";")
row.names(bee_factors) <- bee_factors[["ID"]]
# In total 55 samples are available
pander::pandoc.table(bee_factors[c(1:2,25:26,45:46),], caption = "Factors for Bumble bee data")
check_input(data = "data/d1/Table_S1_raw.txt")
# chemical data
data("peak_data")
# corresponding factors
data("peak_factors")
pander::pandoc.table(head(peak_factors), caption = "Factors for Seal data")
# The alignment was performed in 3:30 minutes.
load(file = "data/d1/bee_aligned.RData")
# The computation took 24:59 Minutes
load(file = "data/d1/seal_aligned.RData")
plot.bee1 <- gc_heatmap(bee_aligned, threshold = 0.05, main_title = paste("Bumblee bee data"))
plot.seal1 <- gc_heatmap(seal_aligned, threshold = 0.05, main_title = "Fur seal data")
heatmaps <- gridExtra::grid.arrange(plot.bee1,plot.seal1)
grid::grid.newpage()
grid::grid.draw(heatmaps)
plot.bee1 <- gc_heatmap(bee_aligned, threshold = 0.05, main_title = paste("Bumblee bee data"),
label_size = 0.6)
plot.seal1 <- gc_heatmap(seal_aligned, threshold = 0.05, main_title = "Fur seal data",
label_size = 0.6)
heatmaps <- gridExtra::grid.arrange(plot.bee1,plot.seal1)
grid::grid.newpage()
grid::grid.draw(heatmaps)
grid::grid.newpage()
grid::grid.draw(heatmaps)
plot.bee1 <- gc_heatmap(bee_aligned, threshold = 0.05, main_title = paste("Bumblee bee data"),
label_size = 6)
plot.seal1 <- gc_heatmap(seal_aligned, threshold = 0.05, main_title = "Fur seal data",
label_size = 6)
heatmaps <- gridExtra::grid.arrange(plot.bee1,plot.seal1)
grid::grid.newpage()
grid::grid.draw(heatmaps)
grid::grid.newpage()
grid::grid.draw(heatmaps)
wants <- c("vegan","ggplot2","gridExtra","grid")
has   <- wants %in% rownames(installed.packages())
has
if (any(!has)) install.packages(wants[!has])
library(wants)
plot.bee1 <- gc_heatmap(bee_aligned, threshold = 0.05, main_title = paste("Bumblee bee data"),
label = F)
library(knitcitations)
cleanbib()
cite_options(citation_format = "pandoc", check.entries = FALSE)
library(bibtex)
library(pander)
knitr::opts_chunk$set(collapse = TRUE, comment = "#>", cache = FALSE)
# if packages are not installed, load them from CRAN
wants <- c("vegan","ggplot2","gridExtra","grid")
has   <- wants %in% rownames(installed.packages())
if (any(!has)) install.packages(wants[!has])
library(GCalignR)
library(ggplot2)
library(vegan)
library(gridExtra)
library(grid)
## Load factors
bee_factors <- read.csv("data/d1/Table_S1_factors.csv",sep = ";")
row.names(bee_factors) <- bee_factors[["ID"]]
# In total 55 samples are available
pander::pandoc.table(bee_factors[c(1:2,25:26,45:46),], caption = "Factors for Bumble bee data")
check_input(data = "data/d1/Table_S1_raw.txt")
# chemical data
data("peak_data")
# corresponding factors
data("peak_factors")
pander::pandoc.table(head(peak_factors), caption = "Factors for Seal data")
# The alignment was performed in 3:30 minutes.
load(file = "data/d1/bee_aligned.RData")
# The computation took 24:59 Minutes
load(file = "data/d1/seal_aligned.RData")
plot.bee1 <- gc_heatmap(bee_aligned, threshold = 0.05, main_title = paste("Bumblee bee data"),
label = F)
plot.seal1 <- gc_heatmap(seal_aligned, threshold = 0.05, main_title = "Fur seal data",
label = F)
heatmaps <- gridExtra::grid.arrange(plot.bee1,plot.seal1)
grid::grid.newpage()
grid::grid.draw(heatmaps)
plot.bee1 <- gc_heatmap(bee_aligned, threshold = 0.05, main_title = paste("Bumblee bee data"),
label = F)
plot.seal1 <- gc_heatmap(seal_aligned, threshold = 0.05, main_title = "Fur seal data",
label = F, show_legend = F)
heatmaps <- gridExtra::grid.arrange(plot.bee1,plot.seal1)
grid::grid.newpage()
grid::grid.draw(heatmaps)
plot.bee1 <- gc_heatmap(bee_aligned, threshold = 0.05, main_title = paste("Bumblee bee data"),
label = F)
plot.seal1 <- gc_heatmap(seal_aligned, threshold = 0.05, main_title = "Fur seal data",
label = F, show_legend = F)
heatmaps <- gridExtra::grid.arrange(plot.bee1,plot.seal1)
grid::grid.newpage()
grid::grid.draw(heatmaps)
plot.bee1 <- gc_heatmap(bee_aligned, threshold = 0.03, main_title = paste("Bumblee bee data"),
label = F)
plot.seal1 <- gc_heatmap(seal_aligned, threshold = 0.03, main_title = "Fur seal data",
label = F, show_legend = F)
heatmaps <- gridExtra::grid.arrange(plot.bee1,plot.seal1)
grid::grid.newpage()
grid::grid.draw(heatmaps)
plot.bee1 <- gc_heatmap(bee_aligned, threshold = 0.04, main_title = paste("Bumblee bee data"),
label = F)
plot.seal1 <- gc_heatmap(seal_aligned, threshold = 0.04, main_title = "Fur seal data",
label = F, show_legend = F)
heatmaps <- gridExtra::grid.arrange(plot.bee1,plot.seal1)
grid::grid.newpage()
grid::grid.draw(heatmaps)
plot.bee1 <- gc_heatmap(bee_aligned, threshold = 0.05, main_title = paste("Bumblee bee data"),
label = F)
plot.seal1 <- gc_heatmap(seal_aligned, threshold = 0.05, main_title = "Fur seal data",
label = F, show_legend = F)
heatmaps <- gridExtra::grid.arrange(plot.bee1,plot.seal1)
grid::grid.newpage()
grid::grid.draw(heatmaps)
plot.bee1 <- gc_heatmap(bee_aligned, threshold = 0.06, main_title = paste("Bumblee bee data"),
label = F)
plot.seal1 <- gc_heatmap(seal_aligned, threshold = 0.06, main_title = "Fur seal data",
label = F, show_legend = F)
heatmaps <- gridExtra::grid.arrange(plot.bee1,plot.seal1)
grid::grid.newpage()
grid::grid.draw(heatmaps)
plot.bee1 <- gc_heatmap(bee_aligned, threshold = 0.05, main_title = paste("Bumblee bee data"),
label = F)
plot.seal1 <- gc_heatmap(seal_aligned, threshold = 0.05, main_title = "Fur seal data",
label = F, show_legend = F)
heatmaps <- gridExtra::grid.arrange(plot.bee1,plot.seal1)
grid::grid.newpage()
grid::grid.draw(heatmaps)
plot.bee1 <- gc_heatmap(bee_aligned, threshold = 0.07, main_title = paste("Bumblee bee data"),
label = F)
plot.seal1 <- gc_heatmap(seal_aligned, threshold = 0.07, main_title = "Fur seal data",
label = F, show_legend = F)
heatmaps <- gridExtra::grid.arrange(plot.bee1,plot.seal1)
grid::grid.newpage()
grid::grid.draw(heatmaps)
check_input(data = "data/bumblee_bee_input.txt")
bumble_bee_aligned <- align_chromatograms(data = "data/bumblee_bee_input.txt",
conc_col_name = "Area",
max_diff_peak2mean = 0.02,
min_diff_peak2peak = 0.05,
max_linear_shift = 0.05
rt_col_name = "RT",
bumble_bee_aligned <- align_chromatograms(data = "data/bumblee_bee_input.txt",
conc_col_name = "Area",
max_diff_peak2mean = 0.02,
min_diff_peak2peak = 0.05,
max_linear_shift = 0.05,
rt_col_name = "RT",
delete_single_peak = T)
save(bumble_bee_aligned, file = "data/bumble_bee_aligned.RData")
bumble_bee_aligned
seal_aligned <- align_chromatograms(data = peak_data,
conc_col_name = "area",
max_diff_peak2mean = 0.02,
min_diff_peak2peak = 0.05,
rt_col_name = "time",
delete_single_peak = T,
blanks = c("C2","C3"),
iterations = 1)
library(knitcitations)
cleanbib()
cite_options(citation_format = "pandoc", check.entries = FALSE)
library(bibtex)
library(pander)
knitr::opts_chunk$set(collapse = TRUE, comment = "#>", cache = FALSE)
# if packages are not installed, load them from CRAN
wants <- c("vegan","ggplot2","gridExtra","grid")
has   <- wants %in% rownames(installed.packages())
if (any(!has)) install.packages(wants[!has])
library(GCalignR)
library(ggplot2)
library(vegan)
library(gridExtra)
library(grid)
## Load factors
bee_factors <- read.csv("data/d1/Table_S1_factors.csv",sep = ";")
row.names(bee_factors) <- bee_factors[["ID"]]
# In total 55 samples are available
pander::pandoc.table(bee_factors[c(1:2,25:26,45:46),], caption = "Factors for Bumble bee data")
check_input(data = "data/d1/Table_S1_raw.txt")
# chemical data
data("peak_data")
# corresponding factors
data("peak_factors")
pander::pandoc.table(head(peak_factors), caption = "Factors for Seal data")
# The alignment was performed in 3:30 minutes.
load(file = "data/bumble_bee_aligned.RData")
bumble_bee_aligned <- align_chromatograms(data = "data/bumblee_bee_input.txt",
conc_col_name = "Area",
max_diff_peak2mean = 0.02,
min_diff_peak2peak = 0.05,
max_linear_shift = 0.05,
rt_col_name = "RT",
delete_single_peak = T)
library(knitcitations)
cleanbib()
cite_options(citation_format = "pandoc", check.entries = FALSE)
library(bibtex)
library(pander)
knitr::opts_chunk$set(collapse = TRUE, comment = "#>", cache = FALSE)
# if packages are not installed, load them from CRAN
wants <- c("vegan","ggplot2","gridExtra","grid")
has   <- wants %in% rownames(installed.packages())
if (any(!has)) install.packages(wants[!has])
library(GCalignR)
library(ggplot2)
library(vegan)
library(gridExtra)
library(grid)
## Load factors
bee_factors <- read.csv("data/d1/Table_S1_factors.csv",sep = ";")
row.names(bee_factors) <- bee_factors[["ID"]]
# In total 55 samples are available
pander::pandoc.table(bee_factors[c(1:2,25:26,45:46),], caption = "Factors for Bumble bee data")
check_input(data = "data/d1/Table_S1_raw.txt")
# chemical data
data("peak_data")
# corresponding factors
data("peak_factors")
pander::pandoc.table(head(peak_factors), caption = "Factors for Seal data")
# The alignment was performed in 3:30 minutes.
load(file = "data/bumble_bee_aligned.RData")
check_input(seal_aligned)
seal_aligned <- align_chromatograms(data = peak_data,
conc_col_name = "area",
max_diff_peak2mean = 0.02,
min_diff_peak2peak = 0.05,
rt_col_name = "time",
delete_single_peak = T,
blanks = c("C2","C3"),
iterations = 1)
save(seal_aligned, file = "seal_aligned.RData")
RColorBrewer::brewer.pal(3,"Set1")
print(seal_aligned)
plot(seal_aligned)
plot(seal_aligned,which_plot = )
plot(seal_aligned,which_plot = "g")
plot(seal_aligned,which_plot = "rt_range")
rm(list = ls())
library(GCalignR)
pm <- c(0.01,0.02,0.03,0.04) #peak2mean
pp <-  0.05      #c(0.03,0.05,0.07,0.01) #peak2peak
for (i in 1:length(pm)) {
assign(paste0("pp_",as.character(pp),"_pm_",as.character(pm[i])),align_chromatograms(data = peak_data,rt_col_name = "time",conc_col_name = "area",min_diff_peak2peak = pp[i],max_diff_peak2mean = pm[i],rt_cutoff_low = 8))
}
rm(list = ls())
rm(list = ls())
library(GCalignR)
pm <- c(0.01,0.02,0.03,0.04) #peak2mean
pp <-  0.05      #c(0.03,0.05,0.07,0.01) #peak2peak
for (i in 1:length(pm)) {
assign(paste0("pp_",as.character(pp),"_pm_",as.character(pm[i])),align_chromatograms(data = peak_data,rt_col_name = "time",conc_col_name = "area",min_diff_peak2peak = pp[i],max_diff_peak2mean = pm[i],rt_cutoff_low = 8,blanks = c("C2","C3")))
}
save(pp_0.05_pm_0.01,file = "data/pp_0.05_pm_0.01.RData")
save(pp_0.05_pm_0.02,file = "data/pp_0.05_pm_0.02.RData")
save(pp_0.05_pm_0.03,file = "data/pp_0.05_pm_0.03.RData")
save(pp_0.05_pm_0.04,file = "data/pp_0.05_pm_0.04.RData")
save(pp_0.05_pm_0.04,file = "data/pp_0.05_pm_0.04.RData")
save(pp_0.05_pm_0.03,file = "data/pp_0.05_pm_0.03.RData")
save(pp_0.05_pm_0.02,file = "data/pp_0.05_pm_0.02.RData")
save(pp_0.05_pm_0.01,file = "data/pp_0.05_pm_0.01.RData")
citation()
library(knitcitations)
cleanbib()
cite_options(citation_format = "pandoc", check.entries = FALSE)
library(bibtex)
library(pander)
library(knitcitations)
cleanbib()
cite_options(citation_format = "pandoc", check.entries = FALSE)
library(bibtex)
library(pander)
knitr::opts_chunk$set(collapse = TRUE, comment = "#>", cache = FALSE)
library(knitcitations)
cleanbib()
cite_options(citation_format = "pandoc", check.entries = FALSE)
library(bibtex)
library(pander)
knitr::opts_chunk$set(collapse = TRUE, comment = "#>", cache = FALSE)
# if packages are not installed, load them from CRAN
wants <- c("vegan","ggplot2","gridExtra","grid")
has   <- wants %in% rownames(installed.packages())
if (any(!has)) install.packages(wants[!has])
library(GCalignR)
library(ggplot2)
library(vegan)
library(gridExtra)
library(grid)
check_input(data = "data/d1/Table_S1_raw.txt")
# chemical data
data("peak_data")
# corresponding factors
data("peak_factors")
pander::pandoc.table(head(peak_factors), caption = "Factors for Seal data")
bumble_bee_aligned <- align_chromatograms(data = "data/bumblee_bee_input.txt",
conc_col_name = "Area",
max_diff_peak2mean = 0.02,
min_diff_peak2peak = 0.05,
max_linear_shift = 0.05,
rt_col_name = "RT",
delete_single_peak = T)
# The alignment was performed in 3:30 minutes.
load(file = "data/bumble_bee_aligned.RData")
# The computation took 24:59 Minutes
load(file = "data/d1/seal_aligned.RData")
plot.bee1 <- gc_heatmap(bumble_bee_aligned, threshold = 0.07, main_title = paste("Bumblee bee data"),
label = F)
plot.seal1 <- gc_heatmap(seal_aligned, threshold = 0.07, main_title = "Fur seal data",
label = F, show_legend = F)
heatmaps <- gridExtra::grid.arrange(plot.bee1,plot.seal1)
grid::grid.newpage()
grid::grid.draw(heatmaps)
plot(seal_aligned)
# normalise abundancies within samples
bumble_bee_scent <- GCalignR::norm_peaks(bumble_bee_aligned,conc_col_name = "Area",rt_col_name = "RT",out = "data.frame")
# Log + 1 Transformation
bumble_bee_scent <- log(bumble_bee_scent + 1)
bumble_bee_scent <- bumble_bee_scent[match(row.names(bee_factors),row.names(bumble_bee_scent)),]
## Load factors
bee_factors <- read.csv("data/d1/Table_S1_factors.csv",sep = ";")
row.names(bee_factors) <- bee_factors[["ID"]]
# In total 55 samples are available
pander::pandoc.table(bee_factors[c(1:2,25:26,45:46),], caption = "Factors for Bumble bee data")
# normalise abundancies within samples
bumble_bee_scent <- GCalignR::norm_peaks(bumble_bee_aligned,conc_col_name = "Area",rt_col_name = "RT",out = "data.frame")
# Log + 1 Transformation
bumble_bee_scent <- log(bumble_bee_scent + 1)
bumble_bee_scent <- bumble_bee_scent[match(row.names(bee_factors),row.names(bumble_bee_scent)),]
# NMDS using bray-curtis in vegan
bumble_bee_scent_nmds <- vegan::metaMDS(comm = bumble_bee_scent,trymax = 9999)
# Get the coordinates
bumble_bee_scent_nmds <- as.data.frame(bumble_bee_scent_nmds$points)
bumble_bee_scent_nmds <- cbind(bumble_bee_scent_nmds,Species = bee_factors[["Species"]])
ggplot2::ggplot(data = bumble_bee_scent_nmds,ggplot2::aes(MDS1,MDS2,color = Species)) +
ggplot2::geom_point(size = 3) +
ggplot2::stat_ellipse(size = 2) +
ggplot2::labs(title = "", x = "MDS1", y = "MDS2") +
ggplot2::theme_bw(base_size = 14) +
ggplot2::theme(axis.ticks = element_blank(), axis.text = element_blank()) +
scale_colour_manual(values = RColorBrewer::brewer.pal(3,"Dark2"),
name = "",
breaks = c("bimaculatus", "ephippiatus", "flavifrons"),
labels = c("Bombus bimaculatus","B. ephippiatus","B. flavifrons"),
guide = guide_legend(label.theme = element_text(
face = "italic", angle = 0, size = 11)))
vegan::adonis(bumble_bee_scent ~ bee_factors$Species,permutations = 999)
# normalise abundancies within samples
seal_scent <- GCalignR::norm_peaks(seal_aligned,conc_col_name = "area",rt_col_name = "time",out = "data.frame")
# Log + 1 Transformation
seal_scent <- log(seal_scent + 1)
seal_scent <- seal_scent[match(row.names(peak_factors),row.names(seal_scent)),]
# NMDS using bray-curtis in vegan
seal_scent_nmds <- vegan::metaMDS(comm = seal_scent,trymax = 9999)
# Get the coordinates
seal_scent_nmds <- as.data.frame(seal_scent_nmds$points)
seal_scent_nmds <- cbind(seal_scent_nmds,colony = peak_factors[["colony"]])
ggplot2::ggplot(data = seal_scent_nmds,ggplot2::aes(MDS1,MDS2,color = colony)) +
ggplot2::geom_point(size = 3) +
ggplot2::stat_ellipse(size = 2) +
ggplot2::labs(title = "", x = "MDS1", y = "MDS2") +
ggplot2::theme_bw(base_size = 14) +
ggplot2::theme(axis.ticks = element_blank(), axis.text = element_blank()) +
scale_colour_manual(values = RColorBrewer::brewer.pal(3,"Dark2")[c(1,2)],
name = "",
breaks = c("FWB", "SSB"),
labels = c("Freshwater beach","Special study beach"),
guide = guide_legend(label.theme = element_text(
face = "italic", angle = 0, size = 11)))
library(GCalignR)
gc_heatmap(aligned_peak_data)
gc_heatmap(aligned_peak_data, legend_type = "gradient")
gc_heatmap(aligned_peak_data, legend_type = "colourbar")
gc_heatmap(aligned_peak_data, legend_type = "colourbar", threshold = 0.02)
gc_heatmap(aligned_peak_data, legend_type = "legend", threshold = 0.02)
installed.packages(rticles)
installed.packages("rticles")
install.packages("rticles")
install.packages("rticles")
seal_aligned
rm(list = ls())
library(GCalignR)
library(GCalignR)
library(GCalignR)
# Seal scent data
data("peak_data")
# Data is organized in one list of data.frames
str(peak_data[1:2])
check_input(peak_data)
#> All checks passed!
#> Ready for processing with align_chromatograms
library(GCalignR)
# Seal scent data
data("peak_data")
# Data is organized in one list of data.frames
str(peak_data[1:2])
check_input(peak_data)
#> All checks passed!
#> Ready for processing with align_chromatograms
print(seal_aligned)
library(GCalignR)
seal_aligned <- aligned_peak_data
print(seal_aligned)
plot(seal_aligned)
install.packages(c("ggplot2", "inbreedR", "knitcitations", "knitr", "plyr", "rmarkdown"))
library(GCalignR)
GCalignR::
?GCalignR
library(GCalignR)
check_input(peak_data)
check_input(peak_data,list_peaks = T)
save(seal_aligned,file = "seal_aligned.RData")
gc_heatmap(seal_aligned,type = "continuous")
plot(seal_aligned)
library(GCalignR)
# Seal scent data
data("peak_data")
# Data is organized in one list of data frames
str(peak_data[1:2])
check_input(peak_data)
seal_aligned <- align_chromatograms(data = peak_data,
conc_col_name = "area",
max_diff_peak2mean = 0.03,
min_diff_peak2peak = 0.05,
max_linear_shift = 0.05,
rt_col_name = "time",
delete_single_peak = TRUE,
blanks = c("C2","C3")) # negativ controls
load(seal_aligned.RData)
getwd()
load("seal_aligned.RData")
plot(seal_aligned)
gc_heatmap(seal_aligned,type = "continuous", substance_subset = 1:10, samples_subset = 1:10)
plot(seal_aligned)
gc_heatmap(seal_aligned,type = "continuous", substance_subset = 1:25, samples_subset = 1:25)
library(GCalignR))
library(GCalignR)
?align_chromatograms
