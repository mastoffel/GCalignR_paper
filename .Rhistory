ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 2,
zlim = c(0,0.2))
with(errors_beph, scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
main = "Bombus ephippiatus\nn = 782",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 2,
zlim = c(0,0.2)))
with(errors_bfla, scatter3D(
x = p2p ,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
main = "Bombus flavifrons\nn = 457",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 2,
zlim = c(0,0.2)))
## Set up the margins
par(mfrow = c(1,3),family = "serif", mai = c(0.1,0.3,0.5,0.15))
## plotting
scatter3D(
x = errors_bbim[["p2p"]],
y = errors_bbim[["p2m"]],
z = errors_bbim[["error"]],
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
main = "Bombus bimaculatus\nn = 717",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 2,
zlim = c(0,0.2))
with(errors_beph, scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
main = "Bombus ephippiatus\nn = 782",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 2,
zlim = c(0,0.2)))
with(errors_bfla, scatter3D(
x = p2p ,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
main = "Bombus flavifrons\nn = 457",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 2,
zlim = c(0,0.2)))
df[which(df[["mean"]] == min(df[["mean"]])),]
load("data/df.RData")
plot <- ggplot2::ggplot(data = df,aes(x = noise, y = error, group = id, col = id)) +
geom_smooth(level = 0.95) +
theme_bw(base_size = 12) +
theme(aspect.ratio = 1) +
xlab("Additional noise level") +
ylab("Error rate") +
scale_x_continuous(breaks = seq(0,1,0.1)) +
scale_y_continuous(breaks = seq(0,0.3,0.02)) +
scale_colour_manual(values = c("#1B9E77", "#D95F02", "#7570B3"),
name = "",
breaks = c("bbim", "beph", "bfla"),
labels = c("Bombus bimaculatus",
"B. ephippiatus",
"B. flavifrons"),
guide = guide_legend(
label.theme = element_text(
face = "italic", angle = 0,
size = 11)))
plot
ggsave(plot,filename = "data/noise_simulation.png",device = "png",dpi = 300,width = 6,height = 6,units = "in")
load("data/df.RData")
plot <- ggplot2::ggplot(data = df,aes(x = noise, y = error, group = id, col = id)) +
geom_smooth(level = 0.95) +
theme_bw(base_size = 14) +
theme(aspect.ratio = 1) +
xlab("Additional noise level") +
ylab("Error rate") +
scale_x_continuous(breaks = seq(0,1,0.1)) +
scale_y_continuous(breaks = seq(0,0.3,0.02)) +
scale_colour_manual(values = c("#1B9E77", "#D95F02", "#7570B3"),
name = "",
breaks = c("bbim", "beph", "bfla"),
labels = c("Bombus bimaculatus",
"B. ephippiatus",
"B. flavifrons"),
guide = guide_legend(
label.theme = element_text(
face = "italic", angle = 0,
size = 11)))
plot
ggsave(plot,filename = "data/noise_simulation.tif",device = "tiff",dpi = 300,width = 8,height = 8,units = "in")
gc_heatmap(aligned_peak_data,type = "discrete", substance_subset = 1:25, samples_subset = 1:25)
plot(aligned_peak_data)
?norm_peaks()
?norm_peaks
library(GCalignR)
?norm_peaks
## load the package
library(GCalignR)
## Path to the dataset
fpath <- system.file("extdata", "peak_data.txt", package = "GCalignR")
check_input(fpath)
print(aligned_peak_data)
plot(aligned_peak_data)
gc_heatmap(aligned_peak_data,type = "discrete", substance_subset = 1:25, samples_subset = 1:25)
data <- norm_peaks(data = aligned_peak_data,
rt_col_name = "time",
conc_col_name = "area",
out ="data.frame" )
data("peak_factors")
peak_factors
## load the package
library(GCalignR)
## Path to the dataset
fpath <- system.file("extdata", "peak_data.txt", package = "GCalignR")
check_input(fpath)
print(aligned_peak_data)
plot(aligned_peak_data)
gc_heatmap(aligned_peak_data,type = "discrete", substance_subset = 1:25, samples_subset = 1:25)
scent <- norm_peaks(data = aligned_peak_data,
rt_col_name = "time",
conc_col_name = "area",
out = "data.frame" )
library(vegan)
## factors for each sample of the chemical dataset
data("peak_factors")
## both datasets have the same rownames and can be sorted accordingly
scent <- scent[match(row.names(peak_factors),row.names(scent)),]
## NMDS using Bray-Curtis dissimilarities
scent_nmds <- vegan::metaMDS(comm = scent,distance = "bray")
## get the x and y coordinates
scent_nmds <- as.data.frame(scent_nmds$points)
## add the factor of interest
scent_nmds <- cbind(scent_nmds,colony = peak_factors[["colony"]])
## load the package
library(GCalignR)
## Path to the dataset
fpath <- system.file("extdata", "peak_data.txt", package = "GCalignR")
check_input(fpath)
print(aligned_peak_data)
plot(aligned_peak_data)
gc_heatmap(aligned_peak_data,type = "discrete", substance_subset = 1:25, samples_subset = 1:25)
scent <- norm_peaks(data = aligned_peak_data,
rt_col_name = "time",
conc_col_name = "area",
out = "data.frame" )
library(vegan)
## factors for each sample of the chemical dataset
data("peak_factors")
## both datasets have the same rownames and can be sorted accordingly
scent <- scent[match(row.names(peak_factors),row.names(scent)),]
## standard log + 1 transformation
scent <- log(scent + 1)
## NMDS using Bray-Curtis dissimilarities
scent_nmds <- vegan::metaMDS(comm = scent,distance = "bray")
## get the x and y coordinates
scent_nmds <- as.data.frame(scent_nmds$points)
## add the factor of interest
scent_nmds <- cbind(scent_nmds,colony = peak_factors[["colony"]])
## plot results
ggplot2::ggplot(data = scent_nmds,ggplot2::aes(MDS1,MDS2,color = colony)) +
ggplot2::geom_point(size = 4) + ggplot2::stat_ellipse(size = 2) + ggplot2::labs(title = "", x = "MDS1", y = "MDS2") + ggplot2::theme_void()
scent_nmds <- vegan::metaMDS(comm = scent,distance = "bray")
scent_nmds$stress
## plot results
ggplot2::ggplot(data = scent_nmds,ggplot2::aes(MDS1,MDS2,color = colony)) +
ggplot2::geom_point(size = 4) + ggplot2::stat_ellipse(size = 2) + ggplot2::labs(title = stress, x = "MDS1", y = "MDS2") + ggplot2::theme_void()
## load the package
library(GCalignR)
## Path to the dataset
fpath <- system.file("extdata", "peak_data.txt", package = "GCalignR")
check_input(fpath)
print(aligned_peak_data)
plot(aligned_peak_data)
gc_heatmap(aligned_peak_data,type = "discrete", substance_subset = 1:25, samples_subset = 1:25)
scent <- norm_peaks(data = aligned_peak_data,
rt_col_name = "time",
conc_col_name = "area",
out = "data.frame" )
library(vegan)
## factors for each sample of the chemical dataset
data("peak_factors")
## both datasets have the same rownames and can be sorted accordingly
scent <- scent[match(row.names(peak_factors),row.names(scent)),]
## standard log + 1 transformation
scent <- log(scent + 1)
## NMDS using Bray-Curtis dissimilarities
scent_nmds <- vegan::metaMDS(comm = scent,distance = "bray")
## extract the stress value
stress <- scent_nmds[["stress"]]
## get the x and y coordinates
scent_nmds <- as.data.frame(scent_nmds$points)
## add the factor of interest
scent_nmds <- cbind(scent_nmds,colony = peak_factors[["colony"]])
## plot results
ggplot2::ggplot(data = scent_nmds,ggplot2::aes(MDS1,MDS2,color = colony)) +
ggplot2::geom_point(size = 4) + ggplot2::stat_ellipse(size = 2) + ggplot2::labs(title = stress, x = "MDS1", y = "MDS2") + ggplot2::theme_void()
## plot results
ggplot2::ggplot(data = scent_nmds,ggplot2::aes(MDS1,MDS2,color = colony)) +
ggplot2::geom_point(size = 4) + ggplot2::stat_ellipse(size = 2) + ggplot2::labs(title = paste0("stress = ", round(stress,2)), x = "MDS1", y = "MDS2") + ggplot2::theme_void()
## plot results
ggplot2::ggplot(data = scent_nmds,ggplot2::aes(MDS1,MDS2,color = colony)) +
ggplot2::geom_point(size = 4) + ggplot2::stat_ellipse(size = 2) + ggplot2::labs(title = paste0("stress = ", round(stress,2)), x = "MDS1", y = "MDS2") +
ggplot2::theme_void() + ggplot2::theme(panel.border = element_rect())
ggplot2::ggplot(data = scent_nmds,ggplot2::aes(MDS1,MDS2,color = colony)) +
ggplot2::geom_point(size = 4) + ggplot2::stat_ellipse(size = 2) + ggplot2::labs(title = paste0("stress = ", round(stress,2)), x = "MDS1", y = "MDS2") +
ggplot2::theme_void() + ggplot2::theme(panel.border = element_line())
## plot results
ggplot2::ggplot(data = scent_nmds,ggplot2::aes(MDS1,MDS2,color = colony)) +
ggplot2::geom_point(size = 4) + ggplot2::stat_ellipse(size = 2) + ggplot2::labs(title = paste0("stress = ", round(stress,2)), x = "MDS1", y = "MDS2") +
ggplot2::theme_void() + ggplot2::theme(panel.background = element_rect(colour = "black", size=4))
library(ggplot2)
ggplot(mtcars, aes(mpg, disp)) + geom_point() + geom_rug() +
theme(axis.text.y   = element_text(size=14),
axis.text.x   = element_text(size=14),
axis.title.y  = element_text(size=14),
axis.title.x  = element_text(size=14),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill=NA, size=5)
)
## plot results
ggplot(data = scent_nmds,aes(MDS1,MDS2,color = colony)) +
geom_point(size = 4) + stat_ellipse(size = 2) + labs(title = paste0("stress = ", round(stress,2)), x = "MDS1", y = "MDS2") +
theme_void() + theme(panel.background = element_rect(colour = "black", size=4))
## plot results
ggplot(data = scent_nmds,aes(MDS1,MDS2,color = colony)) +
geom_point(size = 4) + stat_ellipse(size = 2) + labs(title = paste0("stress = ", round(stress,2)), x = "MDS1", y = "MDS2") +
theme_void()
## plot results
ggplot(data = scent_nmds,aes(MDS1,MDS2,color = colony)) +
geom_point(size = 4) + stat_ellipse(size = 2) + labs(title = paste0("stress = ", round(stress,2)), x = "MDS1", y = "MDS2") +
theme_void() + theme(panel.background = element_rect(colour = "black", size = 2))
## plot results
ggplot(data = scent_nmds,aes(MDS1,MDS2,color = colony)) +
geom_point(size = 4) + stat_ellipse(size = 2) + labs(title = paste0("stress = ", round(stress,2)), x = "MDS1", y = "MDS2") +
theme_void() + theme(panel.background = element_rect(colour = "black", size = 2,fill = NA))
## plot results
ggplot(data = scent_nmds,aes(MDS1,MDS2,color = colony)) +
geom_point(size = 4) + stat_ellipse(size = 2) + labs(title = paste0("stress = ", round(stress,2)), x = "MDS1", y = "MDS2") +
theme_void() + theme(panel.background = element_rect(colour = "black", size = 2,fill = NA))
?vegan::adonis
## ordiplot with ggplot2
library(ggplot2)
ggplot(data = scent_nmds,aes(MDS1,MDS2,color = colony)) +
geom_point(size = 4) +
stat_ellipse(size = 2) +
labs(title = paste0("stress = ", round(stress,2)), x = "MDS1", y = "MDS2") +     theme_void() +
theme(panel.background = element_rect(colour = "black", size = 2,fill = NA))
## load the package
library(GCalignR)
## Path to the dataset
fpath <- system.file("extdata", "peak_data.txt", package = "GCalignR")
check_input(fpath)
print(aligned_peak_data)
plot(aligned_peak_data)
gc_heatmap(aligned_peak_data,type = "discrete", substance_subset = 1:25, samples_subset = 1:25)
scent <- norm_peaks(data = aligned_peak_data,
rt_col_name = "time",
conc_col_name = "area",
out = "data.frame" )
library(vegan)
## factors for each sample of the chemical dataset
data("peak_factors")
## both datasets have the same rownames and can be sorted accordingly
scent <- scent[match(row.names(peak_factors),row.names(scent)),]
## standard log + 1 transformation
scent <- log(scent + 1)
## NMDS using Bray-Curtis dissimilarities
scent_nmds <- vegan::metaMDS(comm = scent,distance = "bray")
## extract the stress value
stress <- scent_nmds[["stress"]]
## get the x and y coordinates
scent_nmds <- as.data.frame(scent_nmds$points)
## add the factor of interest
scent_nmds <- cbind(scent_nmds,colony = peak_factors[["colony"]])
## ordiplot with ggplot2
library(ggplot2)
ggplot(data = scent_nmds,aes(MDS1,MDS2,color = colony)) +
geom_point(size = 4) +
stat_ellipse(size = 2) +
labs(title = paste0("stress = ", round(stress,2)), x = "MDS1", y = "MDS2") +     theme_void() +
theme(panel.background = element_rect(colour = "black", size = 2,fill = NA))
## Testing for a location effect
vegan::adonis(scent ~ peak_factors[["colony"]],permutations = 9999)
## Testing for a dispersion effect
anova(vegan::betadisper(vegan::vegdist(scent,method = "bray"),peak_factors[["colony"]]))
## load the package
library(GCalignR)
## Path to the dataset
fpath <- system.file("extdata", "peak_data.txt", package = "GCalignR")
check_input(fpath)
print(aligned_peak_data)
library(vegan)
## factors for each sample of the chemical dataset
data("peak_factors")
## both datasets have the same rownames and can be sorted accordingly
scent <- scent[match(row.names(peak_factors),row.names(scent)),]
## standard log + 1 transformation
scent <- log(scent + 1)
## NMDS using Bray-Curtis dissimilarities
scent_nmds <- vegan::metaMDS(comm = scent,distance = "bray")
## extract the stress value
stress <- scent_nmds[["stress"]]
## get the x and y coordinates
scent_nmds <- as.data.frame(scent_nmds$points)
## add the factor of interest
scent_nmds <- cbind(scent_nmds,colony = peak_factors[["colony"]])
## factors for each sample of the chemical dataset
data("peak_factors")
## both datasets have the same rownames and can be sorted accordingly
scent <- scent[match(row.names(peak_factors),row.names(scent)),]
## standard log + 1 transformation
scent <- log(scent + 1)
## NMDS using Bray-Curtis dissimilarities
scent_nmds <- vegan::metaMDS(comm = scent,distance = "bray")
## extract the stress value
stress <- scent_nmds[["stress"]]
## get the x and y coordinates
scent_nmds <- as.data.frame(scent_nmds$points)
## add the factor of interest
scent_nmds <- cbind(scent_nmds,colony = peak_factors[["colony"]])
## load the package
library(GCalignR)
## Path to the dataset
fpath <- system.file("extdata", "peak_data.txt", package = "GCalignR")
check_input(fpath)
print(aligned_peak_data)
plot(aligned_peak_data)
gc_heatmap(aligned_peak_data,type = "discrete", substance_subset = 1:25, samples_subset = 1:25)
## normalise the peak area
scent <- norm_peaks(data = aligned_peak_data,
rt_col_name = "time",
conc_col_name = "area",
out = "data.frame" )
## factors for each sample of the chemical dataset
data("peak_factors")
## both datasets have the same rownames and can be sorted accordingly
scent <- scent[match(row.names(peak_factors),row.names(scent)),]
## standard log + 1 transformation
scent <- log(scent + 1)
## NMDS using Bray-Curtis dissimilarities
scent_nmds <- vegan::metaMDS(comm = scent,distance = "bray")
## extract the stress value
stress <- scent_nmds[["stress"]]
## get the x and y coordinates
scent_nmds <- as.data.frame(scent_nmds$points)
## add the factor of interest
scent_nmds <- cbind(scent_nmds,colony = peak_factors[["colony"]])
## ordiplot with ggplot2
library(ggplot2)
ggplot(data = scent_nmds,aes(MDS1,MDS2,color = colony)) +
geom_point(size = 4) +
stat_ellipse(size = 2) +
labs(title = paste0("stress = ", round(stress,2)), x = "MDS1", y = "MDS2") +
theme_void() +
theme(panel.background = element_rect(colour = "black", size = 2,fill = NA))
head(GCalignR::peak_factors)
## ordiplot with ggplot2
library(ggplot2)
par(mfrow = c(1,1),family = "serif", mai = c(0.1,0.3,0.5,0.15))
ggplot(data = scent_nmds,aes(MDS1,MDS2,color = colony)) +
geom_point(size = 4) +
stat_ellipse(size = 2) +
labs(title = "", x = "MDS1", y = "MDS2") +
theme_void() +
theme(panel.background = element_rect(colour = "black", size = 2,fill = NA),
aspect.ratio = 1)
## ordiplot with ggplot2
library(ggplot2)
par(mfrow = c(1,1),family = "serif", mai = c(0.1,0.1,0.1,0.1))
ggplot(data = scent_nmds,aes(MDS1,MDS2,color = colony)) +
geom_point(size = 4) +
stat_ellipse(size = 2) +
labs(title = "", x = "MDS1", y = "MDS2") +
theme_void() +
theme(panel.background = element_rect(colour = "black", size = 2,fill = NA),
aspect.ratio = 1)
## ordiplot with ggplot2
library(ggplot2)
par(mfrow = 1,family = "serif", mai = c(0.1,0.1,0.1,0.1))
## ordiplot with ggplot2
library(ggplot2)
par(mfrow = c(1),family = "serif", mai = c(0.1,0.1,0.1,0.1))
## ordiplot with ggplot2
library(ggplot2)
par(mfrow = c(1,1),family = "serif", mai = c(0.1,0.1,0.1,0.1))
ggplot(data = scent_nmds,aes(MDS1,MDS2,color = colony)) +
geom_point(size = 4) +
stat_ellipse(size = 2) +
labs(title = "", x = "MDS1", y = "MDS2") +
theme_void() +
theme(panel.background = element_rect(colour = "black", size = 2,fill = NA),
aspect.ratio = 1)
## NMDS using Bray-Curtis dissimilarities
scent_nmds <- vegan::metaMDS(comm = scent,distance = "bray")
## get the x and y coordinates
scent_nmds <- as.data.frame(scent_nmds[["points"]])
## add the factor of interest
scent_nmds <- cbind(scent_nmds,colony = peak_factors[["age"]])
## ordiplot with ggplot2
library(ggplot2)
ggplot(data = scent_nmds,aes(MDS1,MDS2,color = age)) +
geom_point(size = 4) +
stat_ellipse(size = 2) +
labs(title = "", x = "MDS1", y = "MDS2") +
theme_void() +
theme(panel.background = element_rect(colour = "black", size = 2,fill = NA),
aspect.ratio = 1)
## NMDS using Bray-Curtis dissimilarities
scent_nmds <- vegan::metaMDS(comm = scent,distance = "bray")
## get the x and y coordinates
scent_nmds <- as.data.frame(scent_nmds[["points"]])
## add the factor of interest
scent_nmds <- cbind(scent_nmds,colony = peak_factors[["age"]])
## ordiplot with ggplot2
library(ggplot2)
ggplot(data = scent_nmds,aes(MDS1,MDS2,color = colony)) +
geom_point(size = 4) +
stat_ellipse(size = 2) +
labs(title = "", x = "MDS1", y = "MDS2") +
theme_void() +
theme(panel.background = element_rect(colour = "black", size = 2,fill = NA),
aspect.ratio = 1)
## NMDS using Bray-Curtis dissimilarities
scent_nmds <- vegan::metaMDS(comm = scent,distance = "bray")
## get the x and y coordinates
scent_nmds <- as.data.frame(scent_nmds[["points"]])
## add the factor of interest
scent_nmds <- cbind(scent_nmds,colony = peak_factors[["colony"]])
## ordiplot with ggplot2
library(ggplot2)
ggplot(data = scent_nmds,aes(MDS1,MDS2,color = colony)) +
geom_point(size = 4) +
stat_ellipse(size = 2) +
labs(title = "", x = "MDS1", y = "MDS2") +
theme_void() +
theme(panel.background = element_rect(colour = "black", size = 2,fill = NA),
aspect.ratio = 1)
## Testing for a location effect
vegan::adonis(scent ~ peak_factors[["colony"]],permutations = 9999)
## Testing for a dispersion effect
anova(vegan::betadisper(vegan::vegdist(scent,method = "bray"),peak_factors[["colony"]]))
cite("devtools")
cite(devtools)
citation(package = "devtools")
