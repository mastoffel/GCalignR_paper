ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.sub = 3,
zlim = c(0,0.25))
with(errors_beph, scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
sub = "Bombus ephippiatus\nn = 782",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.sub = 3,
zlim = c(0,0.25)))
with(errors_bfla, scatter3D(
x = p2p ,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
sub = "Bombus flavifrons\nn = 457",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.sub = 3,
zlim = c(0,0.25)))
tiff("Plot1.tif", res = 300)
par(mfrow = c(1,3),family = "serif", mai = c(0.1,0.3,0.5,0.15))
scatter3D(
x = errors_bbim[["p2p"]],
y = errors_bbim[["p2m"]],
z = errors_bbim[["error"]],
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
main = "Bombus bimaculatus\nn = 717",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 3,
zlim = c(0,0.25))
with(errors_beph, scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
main = "Bombus ephippiatus\nn = 782",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 3,
zlim = c(0,0.25)))
with(errors_bfla, scatter3D(
x = p2p ,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
main = "Bombus flavifrons\nn = 457",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 3,
zlim = c(0,0.25)))
dev.off()
par(mfrow = c(1,3),family = "serif", mai = c(0.1,0.3,0.5,0.15))
scatter3D(
x = errors_bbim[["p2p"]],
y = errors_bbim[["p2m"]],
z = errors_bbim[["error"]],
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
main = "Bombus bimaculatus\nn = 717",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 3,
zlim = c(0,0.25))
with(errors_beph, scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
main = "Bombus ephippiatus\nn = 782",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 3,
zlim = c(0,0.25)))
with(errors_bfla, scatter3D(
x = p2p ,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
main = "Bombus flavifrons\nn = 457",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 3,
zlim = c(0,0.25)))
rm(list=ls())
library(GCalignR)
fpath <- system.file("extdata", "bfla.txt", package = "GCalignR")
fpath <- system.file("extdata", "peak_data.txt", package = "GCalignR")
fpath
file.show(file.path(R.home("doc"), "COPYRIGHTS"))
file.show(fpath)
file.show(file.path(R.home("doc"))
)
file.path(R.home("doc"), "COPYRIGHTS"))
file.path(R.home("doc"), "COPYRIGHTS")
file.show(fpath)
system.file("extdata", "peak_data.txt", "GCalignR")
system.file("extdata", "peak_data.txt", package = "GCalignR")
file.info(system.file("extdata", "peak_data.txt", package = "GCalignR"))
file.show(system.file("extdata", "peak_data.txt", package = "GCalignR"))
library(GCalignR)
library(stringr)
library(readr)
# Get the path to the dataset
fpath <- system.file("extdata", "peak_data.txt", package = "GCalignR")
# The first row contains all sample names
read_lines(fpath, n_max = 1) %>% str_split(pattern = "\t") %>% unlist()
# The second row contains variable names
read_lines(fpath, n_max = 1, skip = 1) %>% str_split(pattern = "\t") %>% unlist()
library(GCalignR)
library(stringr)
library(readr)
# Get the path to the dataset
fpath <- system.file("extdata", "peak_data.txt", package = "GCalignR")
# The first row contains all sample names
read_lines(fpath, n_max = 1) %>% str_split(pattern = "\t") %>% unlist()
# The second row contains variable names
read_lines(fpath, n_max = 1, skip = 1) %>% str_split(pattern = "\t") %>% unlist()
library(GCalignR)
check_input(fpath)
library(GCalignR)
check_input(fpath)
library(GCalignR)
check_input(fpath)
print(aligned_peak_data)
plot(aligned_peak_data)
gc_heatmap(aligned_peak_data,type = "continuous", substance_subset = 1:25, samples_subset = 1:25)
plot(aligned_peak_data)
gc_heatmap(aligned_peak_data,type = "discrete", substance_subset = 1:25, samples_subset = 1:25)
plot(aligned_peak_data,which_plot = "peak_numbers")
gc_heatmap(aligned_peak_data,type = "discrete", substance_subset = 1:25, samples_subset = 1:25)
plot(aligned_peak_data,which_plot = "peak_numbers")
gc_heatmap(aligned_peak_data,type = "discrete", substance_subset = 1:25, samples_subset = 1:25)
plot(aligned_peak_data,which_plot = "peak_numbers")
gc_heatmap(aligned_peak_data,type = "discrete", substance_subset = 1:25, samples_subset = 1:25)
plot(aligned_peak_data,which_plot = "peak_numbers")
plot(aligned_peak_data,which_plot = "peak_numbers")
peak_numbers <- plot(aligned_peak_data,which_plot = "peak_numbers")
gc_heatmap(aligned_peak_data,type = "discrete", substance_subset = 1:25, samples_subset = 1:25)
gc_heatmap(aligned_peak_data,type = "discrete", substance_subset = 1:25, samples_subset = 1:25)
plot(aligned_peak_data)
# Determination of optimal parameters by error-rate estimation
rm(list = ls())
library(GCalignR)
library(ggplot2)
library(plotly)
library(plot3D)
source("ottensmann-stoffel-hoffman/Supplementary-A/R/optimal_params.R")
source("ottensmann-stoffel-hoffman/Supplementary-A/R/error_rate.R")
### Vary alignment parameters
#############################
# results_bfla <- optimal_params(data = "ottensmann-stoffel-hoffman/Supplementary-A/data/bfla.txt",
#                max_diff_peak2mean = seq(from = 0.01, to = 0.05,by = 0.01),rt_col_name = "RT",conc_col_name = "Area",min_diff_peak2peak = seq(from = 0.01, to = 0.2, by = 0.01))
# save(results_bfla,file = "~/GitHub/GCalignR_paper/results_bfla.RData")
#
# results_bbim <- optimal_params(data = "ottensmann-stoffel-hoffman/Supplementary-A/data/bbim.txt",
#                                max_diff_peak2mean = seq(from = 0.01, to = 0.05,by = 0.01),rt_col_name = "RT",conc_col_name = "Area",min_diff_peak2peak = seq(from = 0.01, to = 0.2, by = 0.01))
# save(results_bbim,file = "~/GitHub/GCalignR_paper/results_bbim.RData")
#
# results_beph <- optimal_params(data = "ottensmann-stoffel-hoffman/Supplementary-A/data/beph.txt",
#                                max_diff_peak2mean = seq(from = 0.01, to = 0.05,by = 0.01),rt_col_name = "RT",conc_col_name = "Area",min_diff_peak2peak = seq(from = 0.01, to = 0.2, by = 0.01))
# save(results_beph,file = "~/GitHub/GCalignR_paper/results_beph.RData")
#############################
### Load data
### #########
load("~/GitHub/GCalignR_paper/results_bbim.RData")
load("~/GitHub/GCalignR_paper/results_beph.RData")
load("~/GitHub/GCalignR_paper/results_bfla.RData")
### #########
### Calculate error rates
errors_bbim <- data.frame(p2p = results_bbim[[2]][["p2p"]],p2m = results_bbim[[2]][["p2m"]])
errors_bbim[["error"]] <- unlist(lapply(X = results_bbim[[1]],error_rate,"ottensmann-stoffel-hoffman/Supplementary-A/data/bbim_ms.txt"))
errors_beph <- data.frame(p2p = results_beph[[2]][["p2p"]],p2m = results_beph[[2]][["p2m"]])
errors_beph[["error"]] <- unlist(lapply(X = results_beph[[1]],error_rate,"ottensmann-stoffel-hoffman/Supplementary-A/data/beph_ms.txt"))
errors_bfla <- data.frame(p2p = results_bfla[[2]][["p2p"]],p2m = results_bfla[[2]][["p2m"]])
errors_bfla[["error"]] <- unlist(lapply(X = results_bfla[[1]],error_rate,"ottensmann-stoffel-hoffman/Supplementary-A/data/bfla_ms.txt"))
### #####################
### Remove files
rm(list = c("results_bbim", "results_beph", "results_bfla"))
### ############
### Plots
### Customise: Axis, Background-Grid...
### #####################
# Plot_ly interactive plot, nice for exploration
# plot_bbim <- plot_ly(data = errors_bbim,x = ~p2p, y = ~p2m, z = ~error, color = ~error, colors = c("green","blue")) %>%
# add_markers() %>%
#     layout(scene = list(xaxis = list(title = 'Peak2Peak'),
#                         yaxis = list(title = 'Peak2Mean'),
#                         zaxis = list(title = 'Misaligned peaks [%]')))
# plot3D
tiff("Plot1.tif", res = 300)
par(mfrow = c(1,3),family = "serif", mai = c(0.1,0.3,0.5,0.15))
scatter3D(
x = errors_bbim[["p2p"]],
y = errors_bbim[["p2m"]],
z = errors_bbim[["error"]],
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
main = "Bombus bimaculatus\nn = 717",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 3,
zlim = c(0,0.25))
with(errors_beph, scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
main = "Bombus ephippiatus\nn = 782",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 3,
zlim = c(0,0.25)))
with(errors_bfla, scatter3D(
x = p2p ,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
main = "Bombus flavifrons\nn = 457",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 3,
zlim = c(0,0.25)))
dev.off()
### #####################
### Get best parameters
### ###################
df <- data.frame(p2p = errors_bbim[["p2p"]], p2m = errors_bbim[["p2m"]], bbim = errors_bbim[["error"]],beph = errors_beph[["error"]], bfla = errors_bfla[["error"]])
x <- function(df) mean(df[3:5])
df[["mean"]] <- apply(df,1,FUN = x)
head(df)
# Best for mean error of all three
which(df[["mean"]] == min(df[["mean"]]))
# best for bbim
which(df[["bbim"]] == min(df[["bbim"]]))
which(df[["beph"]] == min(df[["beph"]]))
which(df[["bfla"]] == min(df[["bfla"]]))
par(mfrow = c(1,3),family = "serif", mai = c(0.1,0.3,0.5,0.15))
scatter3D(
x = errors_bbim[["p2p"]],
y = errors_bbim[["p2m"]],
z = errors_bbim[["error"]],
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
main = "Bombus bimaculatus\nn = 717",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 3,
zlim = c(0,0.25))
with(errors_beph, scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
main = "Bombus ephippiatus\nn = 782",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 3,
zlim = c(0,0.25)))
with(errors_bfla, scatter3D(
x = p2p ,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
main = "Bombus flavifrons\nn = 457",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 3,
zlim = c(0,0.25)))
which(df[["bbim"]] == min(df[["bbim"]]))
which(df[["beph"]] == min(df[["beph"]]))
which(df[["bfla"]] == min(df[["bfla"]]))
which(df[["mean"]] == min(df[["mean"]]))
df[which(df[["mean"]] == min(df[["mean"]])),]
df[which(df[["bbim"]] == min(df[["bbim"]])),]
df[which(df[["beph"]] == min(df[["beph"]])),]
df[which(df[["bfla"]] == min(df[["bfla"]])),]
rm(list = ls())
load("~/GitHub/GCalignR_paper/results_bbim.RData")
summary(results_bbim[1])
x <- results_bbim[1][1]
class(x)
x <- results_bbim[1][[1]]
str8x
str(x)
x <- results_bbim[[1]][[1]]
x$input_list
rm(list=ls())
rm(list=ls())
load("~/GitHub/GCalignR_paper/results_bbim.RData")
x <- results_bbim[[1]][[1]]
y <- x$input_list$BBIM01
y <- x$input_list$BBIM01$RT
lapply(x$input_list,)y
y
diff(y)
mean(diff(y))
mean(diff(y,na.rm=T))
mean(diff(y),na.rm = T)
dim(x$input_matrix$RT)
ncol(x$input_matrix$RT)
y <- x$input_matrix$RT[2:ncol(x$input_matrix$RT)]
fx <- function(y) mean(diff(y),na.rm = T)
apply(y,2,fx)
y$BBIM01
diff(y$BBIM01)
fx <- function(y) mean(diff(y[y>0]),na.rm = T)
apply(y,2,fx)
range(apply(y,2,fx))
library(GCalignR)
range(lapply(peak_data,fx))
y <- peak_data[1]
y <- peak_data[[1]]
y$time
fx2 <- function(y) mean(diff(y$time[y$time>0]),na.rm = T)
range(lapply(peak_data,fx2))
mean(lapply(peak_data,fx2))
(lapply(peak_data,fx2))
mean(unlist((lapply(peak_data,fx2))))
rm(list=ls())
library(GCalignR)
load("~/GitHub/GCalignR_paper/results_bbim.RData")
x <- results_bbim[[1]][[1]]
y <- x$input_matrix$RT[2:ncol(x$input_matrix$RT)]
fx <- function(y) mean(diff(y[y>0]),na.rm = T)
fx2 <- function(y) mean(diff(y$time[y$time>0]),na.rm = T)
range(apply(y,2,fx))
min(apply(y,2,fx))
fx <- function(y) min(diff(y[y>0]),na.rm = T)
fx2 <- function(y) mean(diff(y$time[y$time>0]),na.rm = T)
range(apply(y,2,fx))
min(apply(y,2,fx))
fx2 <- function(y) min(diff(y$time[y$time>0]),na.rm = T)
y <- peak_data[[1]]
range(lapply(peak_data,fx2))
mean(unlist((lapply(peak_data,fx2))))
fx2 <- function(y) median(diff(y$time[y$time>0]),na.rm = T)
y <- peak_data[[1]]
range(lapply(peak_data,fx2))
mean(unlist((lapply(peak_data,fx2))))
rm(list=ls())
library(GCalignR)
load("~/GitHub/GCalignR_paper/results_bbim.RData")
x <- results_bbim[[1]][[1]]
y <- x$input_matrix$RT[2:ncol(x$input_matrix$RT)]
fx <- function(y) median(diff(y[y>0]),na.rm = T)
fx2 <- function(y) median(diff(y$time[y$time>0]),na.rm = T)
range(apply(y,2,fx))
min(apply(y,2,fx))
y <- peak_data[[1]]
range(lapply(peak_data,fx2))
mean(unlist((lapply(peak_data,fx2))))
median(unlist((lapply(peak_data,fx2))))
rm(list=ls())
library(GCalignR)
load("~/GitHub/GCalignR_paper/results_bbim.RData")
x <- results_bbim[[1]][[1]]
y <- x$input_matrix$RT[2:ncol(x$input_matrix$RT)]
fx <- function(y) median(diff(y[y>0]),na.rm = T)
fx2 <- function(y) median(diff(y$time[y$time>0]),na.rm = T)
range(apply(y,2,fx))
median(apply(y,2,fx))
y <- peak_data[[1]]
range(lapply(peak_data,fx2))
median(unlist((lapply(peak_data,fx2))))
