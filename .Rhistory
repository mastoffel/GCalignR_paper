fpath <- system.file("extdata","peak_data.txt","GCalignR")
fpath
?sytem.file
?sytem.file
?system.file
system.file("extdata","peak_data.txt",package = "GCalignR")
## identify the path of peak_data in GCalignR
fpath <- system.file("extdata","peak_data.txt",package = "GCalignR")
check_input(fpath)
library(GCalignR)
fpath <- system.file("extdata","peak_data.txt",package = "GCalignR")
check_input(fpath)
## load the package
library(GCalignR)
## identify the path of peak_data in GCalignR
fpath <- system.file("extdata","peak_data.txt",package = "GCalignR")
check_input(fpath)
## load the package
library(GCalignR)
## identify the path of peak_data in GCalignR
fpath <- system.file("extdata","peak_data.txt",package = "GCalignR")
## check the format the data
check_input(fpath)
aligned_peak_data <- align_chromatograms(data = peak_data,
rt_col_name = "time",
max_diff_peak2mean = 0.02,
min_diff_peak2peak = 0.08,
max_linear_shift = 0.05,
delete_single_peak = TRUE,
blanks = c("C2","C3"),
write_output = NULL) # change to generate text files
## load the package
library(GCalignR)
## identify the path of peak_data in GCalignR
fpath <- system.file("extdata","peak_data.txt",package = "GCalignR")
## check the format the data
check_input(fpath)
print(aligned_peak_data)
a <- gc_heatmap(aligned_peak_data,type = "discrete",
substance_subset = 1:25, samples_subset = 1:25)
a + theme(plot.background = element_rect(fill = "grey95")
)
library(ggplot2)
a <- gc_heatmap(aligned_peak_data,type = "discrete",
substance_subset = 1:25, samples_subset = 1:25)
a + theme(plot.background = element_rect(fill = "grey95"))
a + theme(plot.background = element_rect(fill = "white"))
a + theme(plot.background = element_rect(fill = "white"),text = element_text(family = "sans"))
a <- gc_heatmap(aligned_peak_data,type = "discrete",
substance_subset = 1:25, samples_subset = 1:25)
a + theme(plot.background = element_rect(fill = "white"))
ggplot2::ggsave(a,filename = "ottensmann-stoffel-hoffman/figures/heatmap.png",width = 5,height = 5,units = "in",dpi = 300)
plot(aligned_peak_data)
plot(aligned_peak_data)
library(GCalignR)
plot(aligned_peak_data)
library(GCalignR)
?plot.GCalign
plot(x = aligned_peak_data, which_plot ="peak_num")
plot(x = aligned_peak_data, which_plot ="peak_num",cex = 1)
plot(x = aligned_peak_data, which_plot ="peak_num",cex = 1.5)
plot(x = aligned_peak_data, which_plot ="peak_num",cex = 1.5)
plot(x = aligned_peak_data, which_plot ="peak_num",cex.lab = 1.5)
plot(x = aligned_peak_data, which_plot ="peak_num",cex.lab = 1.5,cex.names = 1)
plot(x = aligned_peak_data, which_plot ="peak_num",cex.lab = 1.5,cex.names = 0.9)
plot(x = aligned_peak_data, which_plot ="peak_num",cex.lab = 1.5,cex.names = 0.85)
plot(x = aligned_peak_data, which_plot ="peak_num",cex.lab = 1.5,cex.names = 0.8)
plot_2 <- plot(x = aligned_peak_data, which_plot ="m",cex.lab = 1.5,cex.names = 0.8)
plot_2 <- plot(x = aligned_peak_data, which_plot ="shifts",cex.lab = 1.5,cex.names = 0.8)
plot_2 <- plot(x = aligned_peak_data, which_plot ="m",cex.lab = 1.5,cex.names = 0.8)
plot_3 <- plot(x = aligned_peak_data, which_plot ="variation",cex.lab = 1.5,cex.names = 0.8)
plot_4 <- plot(x = aligned_peak_data, which_plot ="peaks_s",cex.lab = 1.5,cex.names = 0.8)
plot_1 <- plot(x = aligned_peak_data, which_plot ="peak_num",cex.lab = 1.5,cex.names = 0.8)
plot_1 <- plot(x = aligned_peak_data, which_plot ="peak_num",cex.lab = 1.5,cex.names = 0.8)
library(knitr)
knitr::opts_chunk$set(cache = FALSE, fig.width = 7, fig.height = 7,tidy = TRUE,highlight = TRUE,comment = "#>",strip.white = TRUE,collapse = TRUE,tidy = TRUE)
options(width = 55)
library(GCalignR)
library(ggplot2)
library(plot3D)
## small function to test parameters in align_chromatograms
source("R/optimal_params.R")
## calculates errors by matching aligned data to a table of known substances
source("R/error_rate.R")
## custom function for simulations based on chromatograms
source("R/ChromaSimFunctions.R")
## Load data
load("data/results_bbim.RData")
load("data/results_beph.RData")
load("data/results_bfla.RData")
errors_bbim <- data.frame(p2p = results_bbim[[2]][["p2p"]], p2m = results_bbim[[2]][["p2m"]])
errors_bbim[["error"]] <- unlist(lapply(X = results_bbim[[1]], error_rate,"data/bbim_ms.txt"))
errors_beph <- data.frame(p2p = results_beph[[2]][["p2p"]], p2m = results_beph[[2]][["p2m"]])
errors_beph[["error"]] <- unlist(lapply(X = results_beph[[1]], error_rate,"data/beph_ms.txt"))
errors_bfla <- data.frame(p2p = results_bfla[[2]][["p2p"]], p2m = results_bfla[[2]][["p2m"]])
errors_bfla[["error"]] <- unlist(lapply(X = results_bfla[[1]], error_rate,"data/bfla_ms.txt"))
with(errors_bbim,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
main = "Bombus bimaculatus\nn = 717",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 2,
zlim = c(0,0.2)))
with(errors_bbim,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 1,
theta = 30,
phi = 0,
ticktype = "detailed",
main = "Bombus bimaculatus\nn = 717",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 2,
zlim = c(0,0.2)))
with(errors_bbim,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 1,
theta = 30,
ticktype = "detailed",
main = "Bombus bimaculatus\nn = 717",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 2,
zlim = c(0,0.2)))
with(errors_bbim,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 1,
theta = 30,
phi = 0,
ticktype = "detailed",
main = "Bombus bimaculatus\nn = 717",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 2,
zlim = c(0,0.2)))
with(errors_bbim,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 1,
theta = 30,
phi = 0,
ticktype = "detailed",
main = substitute(paste(italic("Bombus bimaculatus"),"\nn = 717")),
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 2,
zlim = c(0,0.2)))
with(errors_bbim,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
xlab = "min_diff_peak2peak",
ylab = "max_diff_peak2mean",
zlab = "Error rate",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 2,
zlim = c(0,0.2)))
with(errors_bbim,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
xlab = "",
ylab = "",
zlab = "",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 2,
zlim = c(0,0.2)))
dev.off()
with(errors_bbim,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
xlab = "",
ylab = "",
zlab = "",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1.25,
cex.axis = 1.25,
cex.main = 2,
zlim = c(0,0.2)))
with(errors_bbim,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
xlab = "",
ylab = "",
zlab = "",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.lab = 1,
cex.axis = 1.25,
cex.main = 2,
zlim = c(0,0.2)))
with(errors_bbim,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
xlab = "",
ylab = "",
zlab = "",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.axis = 1.25,
zlim = c(0,0.2)))
with(errors_bbim,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
xlab = "",
ylab = "",
zlab = "",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.axis = 1,
zlim = c(0,0.2)))
with(errors_bbim,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
xlab = "",
ylab = "",
zlab = "",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.axis = 1,
zlim = c(0,0.2)))
?scatter3D
scatter3D()
scatter3D
View(scatter3D)
View(plot3D:::splitdotpersp)
with(errors_bbim,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
xlab = "",
ylab = "",
zlab = "",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.axis = 1,
zlim = c(0,0.2)))
with(errors_beph,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
xlab = "",
ylab = "",
zlab = "",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.axis = 1,
zlim = c(0,0.2)))
with(errors_bfla,scatter3D(
x = p2p,
y = p2m,
z = error,
pch = 19,
size = 2,
theta = 30,
phi = 0,
ticktype = "detailed",
xlab = "",
ylab = "",
zlab = "",
bty = "g",
colkey = FALSE,
cex = 1.5,
cex.axis = 1,
zlim = c(0,0.2)))
gc_heatmap(aligned_peak_data)
rm(list = ls())
area <- as.data.frame(as.list(aligned_peak_data[["aligned"]][["area"]]))
area <- as.data.frame(as.list(aligned_peak_data[["aligned"]][["area"]][2:83]))
mean_rt <- round(aligned_peak_data[["aligned"]][["time"]][["mean_RT"]])
mean_rt
mean_rt <- round(aligned_peak_data[["aligned"]][["time"]][["mean_RT"]],2)
mean_rt
any(duplicated(mean_rt))
area <- as.data.frame(as.list(aligned_peak_data[["aligned"]][["area"]][2:83]))
mean_rt <- round(aligned_peak_data[["aligned"]][["time"]][["mean_RT"]],2)
chromas <- lapply(1:ncol(area), function(x) as.data.frame(cbind(mean_rt,area[,x])))
names(chromas) <- names(area)
names(chromas)
chromas <- lapply(chromas, FUN = function(data, var_names) {
names(data) <- var_names}, var_names = c("rt","area"))
chromas <- lapply(chromas, remove_zero_area_peaks)
library(knitr)
knitr::opts_chunk$set(cache = FALSE, fig.width = 7, fig.height = 7,tidy = TRUE,highlight = TRUE,comment = "#>",strip.white = TRUE,collapse = TRUE,tidy = TRUE)
options(width = 55)
library(GCalignR)
library(ggplot2)
source("R/ChromaSimFunctions.R")
## The peak area is extracted of all chromatograms
area <- as.data.frame(as.list(aligned_peak_data[["aligned"]][["area"]][2:83]))
## Calculate the mean retention time for every substance, these are used for every sample!
mean_rt <- round(aligned_peak_data[["aligned"]][["time"]][["mean_RT"]],2)
## build a list of samples
chromas <- lapply(1:ncol(area), function(x) as.data.frame(cbind(mean_rt,area[,x])))
## rename every sample accordingly
names(chromas) <- names(area)
## name the variables "rt" and "area"
chromas <- lapply(chromas, FUN = function(data, var_names) {
names(data) <- var_names}, var_names = c("rt","area"))
## remove zero area peaks
chromas <- lapply(chromas, remove_zero_area_peaks)
chromas$M2
area <- as.data.frame(as.list(aligned_peak_data[["aligned"]][["area"]][2:83]))
mean_rt <- round(aligned_peak_data[["aligned"]][["time"]][["mean_RT"]],2)
chromas <- lapply(1:ncol(area), function(x) as.data.frame(cbind(mean_rt,area[,x])))
names(chromas) <- names(area)
chromas$M2
chromas <- lapply(chromas, FUN = function(x) names(x) <- c("time","area"))
chromas$M20
area <- as.data.frame(as.list(aligned_peak_data[["aligned"]][["area"]][2:83]))
mean_rt <- round(aligned_peak_data[["aligned"]][["time"]][["mean_RT"]],2)
names(chromas) <- names(area)
chromas <- lapply(chromas, FUN = function(x) {
names(x) <- c("time","area")
x})
chromas$M20
area <- as.data.frame(as.list(aligned_peak_data[["aligned"]][["area"]][2:83]))
mean_rt <- round(aligned_peak_data[["aligned"]][["time"]][["mean_RT"]],2)
chromas <- lapply(1:ncol(area), function(x) as.data.frame(cbind(mean_rt,area[,x])))
names(chromas) <- names(area)
chromas <- lapply(chromas, FUN = function(x) {
names(x) <- c("time","area")
x})
chromas$M2$time
x <- chromas[[1]]
x
x[x[["time"]] > 0,]
x[x[["time"]] > 0,]
## The peak area is extracted of all chromatograms
area <- as.data.frame(as.list(aligned_peak_data[["aligned"]][["area"]][2:83]))
## Calculate the mean retention time for every substance, these are used for every sample!
mean_rt <- round(aligned_peak_data[["aligned"]][["time"]][["mean_RT"]],2)
## build a list of samples
chromas <- lapply(1:ncol(area), function(x) as.data.frame(cbind(mean_rt,area[,x])))
## rename every sample accordingly
names(chromas) <- names(area)
## name the variables "rt" and "area"
chromas <- lapply(chromas, FUN = function(x) {
names(x) <- c("time","area")
x})
## remove zeros
chromas <- lapply(chromas, function(x) x[x[["time"]] > 0,])
chromas
lapply(chromas,length())
lapply(chromas,nrow)
## The peak area is extracted of all chromatograms
area <- as.data.frame(as.list(aligned_peak_data[["aligned"]][["area"]][2:83]))
## Calculate the mean retention time for every substance, these are used for every sample!
mean_rt <- round(aligned_peak_data[["aligned"]][["time"]][["mean_RT"]],2)
## build a list of samples
chromas <- lapply(1:ncol(area), function(x) as.data.frame(cbind(mean_rt,area[,x])))
## rename every sample accordingly
names(chromas) <- names(area)
## name the variables "rt" and "area"
chromas <- lapply(chromas, FUN = function(x) {
names(x) <- c("time","area")
x})
## remove zeros
chromas <- lapply(chromas, function(x) x[x[["area"]] > 0,])
lapply(chromas,nrow)
library(knitr)
knitr::opts_chunk$set(cache = FALSE, fig.width = 7, fig.height = 7,tidy = TRUE,highlight = TRUE,comment = "#>",strip.white = TRUE,collapse = TRUE,tidy = TRUE)
options(width = 55)
library(GCalignR)
library(ggplot2)
source("R/ChromaSimFunctions.R")
## The peak area is extracted of all chromatograms
area <- as.data.frame(as.list(aligned_peak_data[["aligned"]][["area"]][2:83]))
## Calculate the mean retention time for every substance, these are used for every sample!
mean_rt <- round(aligned_peak_data[["aligned"]][["time"]][["mean_RT"]],2)
## build a list of samples
chromas <- lapply(1:ncol(area), function(x) as.data.frame(cbind(mean_rt,area[,x])))
## rename every sample accordingly
names(chromas) <- names(area)
## name the variables "rt" and "area"
chromas <- lapply(chromas, FUN = function(x) {
names(x) <- c("time","area")
x})
## remove zero area peaks; i.e. absent peaks within single samples
chromas <- lapply(chromas, function(x) x[x[["area"]] > 0,])
out <- sim_linear_shift(Chromas = Chromas,shifts = c(-0.03,0.03))
out <- sim_linear_shift(chromas,shifts = c(-0.03,0.03))
out <- sim_linear_shift(chromas, rt_col_name = "time", shifts = c(-0.03,0.03))
ChromasLinShift <- out[["Chromas"]]
Applied_Shifts <- out[["Shifts"]]
Applied_Shifts
library(ggplot2)
\citep{Drea.2013}
library(ggplot2)
a <- gc_heatmap(aligned_peak_data,type = "binary",threshold = 0.05)
library(GCalignR)
a <- gc_heatmap(aligned_peak_data,type = "binary",threshold = 0.05)
a + theme(plot.background = element_rect(fill = "white"))
ggplot2::ggsave(a,filename = "ottensmann-stoffel-hoffman/figures/heatmap.png",width = 5,height = 5,units = "in",dpi = 300)
citation(package = "ggplot2")
?align_chromatograms
?GCalignR:::bfla
library(GCalignR)
GCalignR:::.__NAMESPACE__.
